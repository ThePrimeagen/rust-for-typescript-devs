{"pageProps":{"post":{"attributes":{"title":"Rust's Borrow Checker","description":"This is usually the hardest part of Rust"},"html":"<h2 id=\"its-time-to-introduce-the-borrow-checker\">Its time to introduce The Borrow Checker</h2>\n<p>The meme&#39;s are real, but the borrow checker isn&#39;t that hard if you have the\nright foundation.</p>\n<br />\n\n<ul>\n<li>we have already talked about every thing is on the <code>stack</code> with <code>ptr</code> to the\n<code>heap</code> if needed</li>\n</ul>\n<br />\n\n<p>(quick example)</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"types-of-values\">Types of values</h2>\n<p>(code time)</p>\n<p>value</p>\n<p>reference</p>\n<p>mutable reference</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"terminology\">Terminology</h2>\n<p>Dropped - releasing memory</p>\n<br />\n<br />\n\n<h3 id=\"there-are-three-rules-you-must-have-in-your-head-at-all-times\">There are THREE rules you must have in your head at all times.</h3>\n<ol>\n<li>There can only be <strong>one</strong> value owner</li>\n<li>There can be <strong>unlimited</strong> immutable borrows (reference) with <strong>no</strong> mutable references</li>\n<li>There can be only <strong>one</strong> mutable reference and <strong>no</strong> immutable references</li>\n</ol>\n<br />\n<br />\n\n<h3 id=\"there-is-one-rule-for-lifetimes\">There is one rule for Lifetimes</h3>\n<ol>\n<li>A reference cannot outlive its value</li>\n</ol>\n<br />\n<br />\n\n<h4 id=\"stated-differently\">Stated differently</h4>\n<p>One var owns the the data</p>\n<p>One var can change the data</p>\n<p>Many vars can look at the data</p>\n<p>You cannot look and change the data simultaneously</p>\n<p>You cannot refer to something that has been dropped (released in memory)</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"test\">Test</h2>\n<ol>\n<li>create a new struct <code>Item</code>, derives <code>Debug</code>, with one property, <code>count</code>, that is an <code>usize</code>.</li>\n<li>create a new <code>fn</code>, <code>add_one</code> that takes in an <code>Item</code> and adds 1 to it.</li>\n<li>In the main function, create <code>item</code> of type <code>Item</code></li>\n<li>Print out <code>item</code> (with Debug print)</li>\n<li>pass <code>item</code> to <code>add_one</code>.</li>\n<li>Print out <code>item</code> again.</li>\n</ol>\n<h4 id=\"derives-debug\">Derives Debug</h4>\n<p>allows for printing of the struct.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {...}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = Item { .. };\n    <span class=\"hljs-comment\">// --------v debug print</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{:?}&quot;</span>, item);\n    <span class=\"hljs-comment\">// Item {</span>\n    <span class=\"hljs-comment\">//    count: 69</span>\n    <span class=\"hljs-comment\">// }</span>\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"first-what-is-causing-the-error\">First, what is causing the error?</h2>\n<p>What is causing the error?</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {\n    count: <span class=\"hljs-type\">isize</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_one</span>(<span class=\"hljs-keyword\">mut</span> item: Item) {\n    item.count += <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = Item { count: <span class=\"hljs-number\">0</span> };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;item {:?}&quot;</span>, item);\n    <span class=\"hljs-title function_ invoke__\">add_one</span>(item);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;item {:?}&quot;</span>, item); <span class=\"hljs-comment\">// &lt;--- why does this error</span>\n}\n</code></pre>\n<p>Let me ask you this question, who owns <code>Item</code> on this line?</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = Item { count: <span class=\"hljs-number\">0</span> };\n</code></pre>\n<p>What about this line?</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-title function_ invoke__\">add_one</span>(item);\n</code></pre>\n<p>Did you read the errors from your LSP?</p>\n<p><strong>Lets do a quick whiteboard memory layout</strong></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"what-rule-are-we-breaking\">What rule are we breaking?</h2>\n<ol>\n<li>There can only be <strong>one</strong> value owner</li>\n<li>There can be <strong>unlimited</strong> immutable borrows (reference) with <strong>no</strong> mutable references</li>\n<li>There can be only <strong>one</strong> mutable reference and <strong>no</strong> immutable references</li>\n</ol>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"how-do-we-fix-this\">How do we fix this?</h2>\n<p>(write code now)</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code\">Complete code</h2>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {\n    count: <span class=\"hljs-type\">isize</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_one</span>(item: &amp;<span class=\"hljs-keyword\">mut</span> Item) {\n    item.count += <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">item</span> = Item { count: <span class=\"hljs-number\">0</span> };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;item {:?}&quot;</span>, item);\n    <span class=\"hljs-title function_ invoke__\">add_one</span>(&amp;<span class=\"hljs-keyword\">mut</span> item);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;item {:?}&quot;</span>, item);\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-make-the-borrow-checker-angry-again\">Lets make the borrow checker angry again!</h2>\n<p>To do this,</p>\n<ul>\n<li>create a function called <code>print_all</code> that takes in an immutable borrow\n(reference) to <code>items</code> and prints each item, one at a time</li>\n</ul>\n<p>In the main function</p>\n<ul>\n<li>create a vector of <code>Item</code>s called <code>items</code></li>\n<li>grab a <strong>mutable</strong> reference to item 0 (<code>get_mut</code>)</li>\n<li>print item 0</li>\n<li>call <code>print_all</code></li>\n<li>print item 0\n(you have to code this all)</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"so-how-did-we-break-it\">So how did we break it?</h2>\n<p>Try to explain why this happened, then what rule did we break?</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {\n    count: <span class=\"hljs-type\">isize</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">add_one</span>(item: &amp;<span class=\"hljs-keyword\">mut</span> Item) {\n    item.count += <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">print_all</span>(items: &amp;<span class=\"hljs-type\">Vec</span>&lt;Item&gt;) {\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">item</span> <span class=\"hljs-keyword\">in</span> items {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;print {:?}&quot;</span>, item);\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[\n        Item { count: <span class=\"hljs-number\">0</span> },\n        Item { count: <span class=\"hljs-number\">0</span> },\n        Item { count: <span class=\"hljs-number\">0</span> },\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = items.<span class=\"hljs-title function_ invoke__\">get_mut</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-title function_ invoke__\">add_one</span>(item);\n    <span class=\"hljs-title function_ invoke__\">print_all</span>(&amp;items);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;help {:?}&quot;</span>, item);\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"one-more-time\">One more time</h2>\n<ul>\n<li>get a mutable reference named <code>one</code>, <code>get_mut(0)</code></li>\n<li>get a mutable reference named <code>two</code>, <code>get_mut(1)</code></li>\n<li><code>println!(&quot;{:?}&quot;, one)</code></li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"what-rule-are-we-breaking-1\">What rule are we breaking?</h2>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {\n    count: <span class=\"hljs-type\">isize</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[\n        Item { count: <span class=\"hljs-number\">0</span> },\n        Item { count: <span class=\"hljs-number\">0</span> },\n        Item { count: <span class=\"hljs-number\">0</span> },\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = items.<span class=\"hljs-title function_ invoke__\">get_mut</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item2</span> = items.<span class=\"hljs-title function_ invoke__\">get_mut</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;help {:?}&quot;</span>, item);\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"does-this-error\">does this error?</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {\n    count: <span class=\"hljs-type\">isize</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[\n        Item { count: <span class=\"hljs-number\">0</span> },\n        Item { count: <span class=\"hljs-number\">0</span> },\n        Item { count: <span class=\"hljs-number\">0</span> },\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = items.<span class=\"hljs-title function_ invoke__\">get_mut</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item2</span> = items.<span class=\"hljs-title function_ invoke__\">get_mut</span>(<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;help {:?}&quot;</span>, item2);\n}\n</code></pre>\n<p>Why or why not?</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"now-with-all-of-your-knowledge-why-does-this-error\">Now, with all of your knowledge why does this error?</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|x| x + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{:?}&quot;</span>, items);\n}\n</code></pre>\n<p>lets talk about why this happens!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"quick-recap-the-big-three-rules\">Quick Recap: The big three rules</h2>\n<h4 id=\"there-can-only-be-one-value-owner\">There can only be one value owner</h4>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = Item { age: <span class=\"hljs-number\">10</span> };\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">other</span> = item; <span class=\"hljs-comment\">// value moved here</span>\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{:?}&quot;</span>, item.age); <span class=\"hljs-comment\">// borrow of moved value (item moved to other)</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"there-can-be-0-mutable-borrows-when-there-are-1-or-more-immutable-borrows\">There can be 0 mutable borrows when there are 1 or more immutable borrows</h4>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[Item { age: <span class=\"hljs-number\">1</span> }, Item { age: <span class=\"hljs-number\">2</span> }];\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items2</span>: &amp;<span class=\"hljs-type\">Vec</span>&lt;Item&gt; = &amp;items; <span class=\"hljs-comment\">// immutable borrow occurs here</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items3</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;Item&gt; = &amp;<span class=\"hljs-keyword\">mut</span> items; <span class=\"hljs-comment\">// cannot borrow mutably with</span>\n                                         <span class=\"hljs-comment\">// immutable references out</span>\n\nitems2.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// item3 is mutably borrowed</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n\n<h4 id=\"there-can-only-be-1-mutable-borrow\">There can only be 1 mutable borrow</h4>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[Item { age: <span class=\"hljs-number\">1</span> }, Item { age: <span class=\"hljs-number\">2</span> }];\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items2</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;Item&gt; = &amp;<span class=\"hljs-keyword\">mut</span> items; <span class=\"hljs-comment\">// First mutable borrow</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items3</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;Item&gt; = &amp;<span class=\"hljs-keyword\">mut</span> items; <span class=\"hljs-comment\">// Error occurs here</span>\n\nitems2.<span class=\"hljs-title function_ invoke__\">push</span>(Item { age: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// nope!</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"applications-of-the-rules\">Applications of the rules</h2>\n<h4 id=\"there-is-a-flow-to-references\">There is a &quot;flow&quot; to references</h4>\n<p>Since <code>items2</code> was not used when <code>items3</code> mutable borrow out, this is ok</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[Item { age: <span class=\"hljs-number\">1</span> }, Item { age: <span class=\"hljs-number\">2</span> }];\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items2</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;Item&gt; = &amp;<span class=\"hljs-keyword\">mut</span> items; <span class=\"hljs-comment\">// First mutable borrow</span>\nitems2.<span class=\"hljs-title function_ invoke__\">push</span>(Item { age: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// ok!</span>\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items3</span>: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;Item&gt; = &amp;<span class=\"hljs-keyword\">mut</span> items; <span class=\"hljs-comment\">// Second mutable borrow</span>\nitems3.<span class=\"hljs-title function_ invoke__\">push</span>(Item { age: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// still ok!</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"references-cannot-outlive-their-associated-values\">References cannot outlive their associated values</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">y</span>: &amp;<span class=\"hljs-type\">usize</span>;\n{\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">x</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">5</span>;\n    y = &amp;x;\n}\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;ooh no! {}&quot;</span>, y);\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"test-1\">Test</h2>\n<p>Remember this code from the <code>enum</code> section?</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Custom</span> {\n    name: <span class=\"hljs-type\">String</span>,\n    age: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Item</span> {\n    <span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-type\">usize</span>),\n    <span class=\"hljs-title function_ invoke__\">Custom</span>(Custom),\n    <span class=\"hljs-title function_ invoke__\">String</span>(<span class=\"hljs-type\">String</span>),\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = Item::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">match</span> &amp;foo {\n        Item::<span class=\"hljs-title function_ invoke__\">Number</span>(num) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;i am a number: {}&quot;</span>, num),\n        Item::<span class=\"hljs-title function_ invoke__\">String</span>(<span class=\"hljs-type\">str</span>) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;i am a string: {}&quot;</span>, <span class=\"hljs-type\">str</span>),\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;name: {}, age: {}&quot;</span>, custom.name, custom.age),\n    }\n\n    <span class=\"hljs-keyword\">match</span> &amp;foo {\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;name: {}, age: {}&quot;</span>, custom.name, custom.age),\n        _ =&gt; {}\n    }\n\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>What rule would we break if we changed the match statements from <code>&amp;foo</code> to\n<code>foo</code>?</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"questions\">Questions</h2>\n<p>I am sure you have a question or two... i can borrow</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n","slug":"borrow-checker","title":"Rust's Borrow Checker","section":"Borrow Checker","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/03-borrow-checker/B-borrow-checker.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/traits-interfaces","prevSlug":"/rust-for-typescript-devs/lessons/borrow-checker/a-light-intro-to-heap"}},"__N_SSG":true}
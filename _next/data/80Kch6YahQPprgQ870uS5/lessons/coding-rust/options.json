{"pageProps":{"post":{"attributes":{"title":"options","description":"an introduction of option"},"html":"<h2 id=\"option\">Option</h2>\n<p><code>Option</code> is the answer to typescript&#39;s undefined / null problem.</p>\n<p><code>Option</code> is an enum</p>\n<br />\n<br />\n\n<p>The thing about null / undefined is that you get different answers for why you\nshould use what or the other...</p>\n<p><code>null</code>: <code>undefined</code> on purpose</p>\n<p><code>undefined</code>: we have no reasonable guarantee it will be there...</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"fun-challenge\">Fun Challenge</h2>\n<p>is this valid TS?</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Foo</span> = {\n  bar?: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">item</span>: <span class=\"hljs-title class_\">Foo</span> = {};\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">item2</span>: <span class=\"hljs-title class_\">Foo</span> = { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">&quot;&quot;</span> };\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">item3</span>: <span class=\"hljs-title class_\">Foo</span> = { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-literal\">undefined</span> }; <span class=\"hljs-comment\">// &lt;-- is this valid?</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"depends-on-your-tsconfig\">Depends on your TSConfig</h2>\n<p><code>exactOptionalPropertyTypes</code> requires that bar either be <em>not specified</em> or a\nstring.</p>\n<br />\n\n<p>Why is <code>item3</code> not technically valid</p>\n<br />\n\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Foo</span> = {\n  bar?: <span class=\"hljs-built_in\">string</span>;\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">item3</span>: <span class=\"hljs-title class_\">Foo</span> = { <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-literal\">undefined</span> };\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"rust-handles-it-different-and-better\">Rust handles it different and better</h2>\n<p>At first, this may seem annoying, but once you get use to them, it grows on you\na ton</p>\n<ol>\n<li>the ENUM definition of Option</li>\n</ol>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Option</span>&lt;T&gt; { <span class=\"hljs-comment\">// yes, generics can be used in enums, again, cool</span>\n    <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-title function_ invoke__\">Some</span>(T),\n}\n</code></pre>\n<p>That means we can create Options with any inner value.</p>\n<ol start=\"2\">\n<li>Rust also recognizes that they will be used so much that they made them\nfirst class citizens.</li>\n</ol>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-comment\">// notice i don&#x27;t have to do Option::Some(...)</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-string\">&quot;different type&quot;</span>);\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(Custom { age: <span class=\"hljs-number\">69</span>, name: <span class=\"hljs-string\">&quot;ThePrimeagen&quot;</span> });\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"but-why\">But why?</h2>\n<p>Why do we need <code>Option</code>s in rust? The answer is memory. If you might or might\nnot return an item from a function, rust needs to be able to allocate that\nmemory on the stack. (we will talk about this more shortly)</p>\n<p>This happens in JS too, it is just behind the scenes in the engine</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"working-with-option\">Working with Option</h2>\n<p>They are enums, so <code>match</code>/<code>if let</code> pattern matching works, but there is more\nbecause there are plenty of convenient methods.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-start-with-a-small-exercise\">Lets start with a small exercise</h2>\n<p>You can erase all the code you have written thus far and lets start with\nTypeScript.</p>\n<p>I want you to write a function with the following:</p>\n<ul>\n<li>signature takes in a <code>number</code> or <code>undefined</code> and returns a <code>number</code></li>\n<li>if the value is <code>undefined</code>, return 0</li>\n<li>else multiply the value by <code>5</code></li>\n<li>the signature cannot use <code>?</code> as that doesn&#39;t mean you <em>have to pass in\nundefined</em>.</li>\n</ul>\n<p>I think you can do this pretty quick, i&#39;ll give you one minute.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> (num ?? <span class=\"hljs-number\">0</span>) * <span class=\"hljs-number\">5</span>;\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-do-the-same-thing-with-rust\">Lets do the same thing with rust</h2>\n<p>Remember, repetition and small exercises are a great way to learn, so make sure\nyou are participating!</p>\n<p>Requirements</p>\n<ul>\n<li>signature takes in a <code>number</code> or <code>undefined</code> and returns a <code>number</code></li>\n<li>if the value is <code>undefined</code>, return 0</li>\n<li>else multiply the value by <code>5</code></li>\n</ul>\n<p>I&#39;ll give you a couple moments to try yourself\n(don&#39;t just code, scroll down (note to me))</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"how-i-started\">How I started</h2>\n<p>When you first start with rust, it looks pretty ugly, so let me show you how i\nwould have completed this.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-how-i-would-have\">Complete Code (How I would have)</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">multiply</span>(num: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n    <span class=\"hljs-keyword\">if</span> num.<span class=\"hljs-title function_ invoke__\">is_some</span>() {\n        <span class=\"hljs-keyword\">return</span> num.<span class=\"hljs-title function_ invoke__\">unwrap</span>() * <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// unwrap a None causes a panic</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"how-i-would-now\">How I would now</h2>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"much-nicer\">Much nicer</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">multiply</span>(num: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n    <span class=\"hljs-keyword\">return</span> num.<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(<span class=\"hljs-number\">0</span>) * <span class=\"hljs-number\">5</span>;\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-change-up-the-rules-a-bit\">Lets change up the rules a bit</h2>\n<p>Start with TypeScript<br/>\ninstead of returing 0, if <code>undefined</code> is provided, return <code>undefined</code> else\nmultiply by 5</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">undefined</span></span>): <span class=\"hljs-literal\">undefined</span> | <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> num === <span class=\"hljs-literal\">undefined</span> ? <span class=\"hljs-literal\">undefined</span> : num * <span class=\"hljs-number\">5</span>;\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"can-rust-help-us\">Can Rust help us?</h2>\n<p>yes it can! We ackshually have 2 different ways we can accomplish this</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"method-1-map\">Method 1: map</h2>\n<p><code>Option#map</code> keeps the box value (<code>Option</code>) while giving you a chance to deal\nwith the inner value, which for us is a number.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">//-----------------v is a {integer}!</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = foo.<span class=\"hljs-title function_ invoke__\">map</span>(|x| {...})\n<span class=\"hljs-comment\">//---^ is now Option&lt;Return type of map&gt;</span>\n</code></pre>\n<p>Go a head, give it a shot, and upgrade our previous example. The new signature\nshould look like <code>fn multiply(num: Option&lt;usize&gt;) -&gt; Option&lt;usize&gt; {...</code></p>\n<br/>\n\n<p>i&#39;ll give you a moment to try it out</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">multiply</span>(num: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> num.<span class=\"hljs-title function_ invoke__\">map</span>(|x| x * <span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// remains as an option</span>\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"version-2--operator\">Version 2, ? operator</h2>\n<p>When you have a function that returns an <code>Option</code> you can automagically unwrap\nthe value.</p>\n<br/>\n\n<p>That might sound confusing, let me show you what its doing</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-comment\">// --------v Option&lt;usize&gt;</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = foo?;\n    <span class=\"hljs-comment\">//---^ usize</span>\n}\n</code></pre>\n<p>This expands out to</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-keyword\">match</span> foo {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(x) =&gt; x,\n        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n    };\n}\n</code></pre>\n<p>See if you can change your <code>.map</code> example to use <code>?</code></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-3\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">multiply</span>(num: <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(num? * <span class=\"hljs-number\">5</span>);\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-do-a-little-exercise\">Lets do a little exercise</h2>\n<p>lets do a moment of practice!</p>\n<br />\n\n<h2 id=\"small-program\">Small program</h2>\n<ul>\n<li><p>write a function, call it <code>practice</code>, that takes in <code>nums</code> of <code>Vec&lt;usize&gt;</code>\nand an <code>index: usize</code></p>\n</li>\n<li><p>Return one of the following</p>\n<ul>\n<li>if value exists at <code>index</code> in <code>nums</code>, return it multiplied by 5</li>\n<li>if there is no value, return <code>index</code> multiplied by 5</li>\n</ul>\n</li>\n</ul>\n<p>First typescript (i&#39;ll give you a moment)!</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-code-4\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">practice</span>(<span class=\"hljs-params\">list: <span class=\"hljs-built_in\">number</span>[], idx: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> (list.<span class=\"hljs-property\">length</span> &gt; idx ? list[idx] : idx) * <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">practice2</span>(<span class=\"hljs-params\">list: <span class=\"hljs-built_in\">number</span>[], idx: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">if</span> (idx &gt;= list.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">return</span> idx * <span class=\"hljs-number\">5</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> list[idx] * <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">practice</span>(list, <span class=\"hljs-number\">4</span>));\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"now-to-the-rust-version\">Now to the rust version!</h2>\n<p>I&#39;ll give you a moment.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"complete-version\">Complete Version</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">practice</span>(items: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;, idx: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n    <span class=\"hljs-keyword\">return</span> items.<span class=\"hljs-title function_ invoke__\">get</span>(idx).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(&amp;idx) * <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">vec</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;value: {}&quot;</span>, <span class=\"hljs-title function_ invoke__\">practice</span>(vec, <span class=\"hljs-number\">0</span>));\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"would-you-look-at-it\">Would you look at it?</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">return</span> (list.<span class=\"hljs-property\">length</span> &gt; idx ? list[idx] : idx) * <span class=\"hljs-number\">5</span>;\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title function_ invoke__\">get</span>(idx).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(&amp;idx) * <span class=\"hljs-number\">5</span>;\n</code></pre>\n<p>Rust as a language is hard. But there are TONS of utilities that make it\nreally easy to work with. This is just one example. The Option<T> interface</p>\n<br />\n\n<p>Rusts take on the &quot;Billion&quot; dollar mistake i think is the right move.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"a-quick-thing-about-vectors\">A quick thing about Vectors</h2>\n<ul>\n<li><p>What&#39;s the difference between <code>[]</code> and <code>.get(x)</code>?</p>\n<ul>\n<li><code>[]</code> directly accesses the element, if its not there, its like accessing\nundefined.</li>\n<li><code>.get(x)</code> safely handles out of bounds values</li>\n</ul>\n</li>\n<li><p>why <code>unwrap_or(&amp;idx)</code>?</p>\n<ul>\n<li><code>.get(x)</code> returns Option&lt;&amp;T&gt;</li>\n<li><code>unwrap_or</code> must maintain the <em>same</em> type</li>\n</ul>\n</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"somequestions\">Some(Questions)?</h2>\n<p>... maybe that joke is a bit nerdy</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n","slug":"options","title":"options","section":"Coding Rust","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/02-coding-rust/C-options.md","nextSlug":"/rust-for-typescript-devs/lessons/coding-rust/results","prevSlug":"/rust-for-typescript-devs/lessons/coding-rust/is-for-enums"}},"__N_SSG":true}
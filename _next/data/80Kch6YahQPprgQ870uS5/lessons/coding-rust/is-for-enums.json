{"pageProps":{"post":{"attributes":{"title":"Rust Enums","description":"Rust enums are the greatest thing you have ever seen"},"html":"<h2 id=\"enums-in-typescript\">Enums in TypeScript</h2>\n<p><img src=\"/rust-for-typescript-devs/./images/enums-bad.png\" alt=\"Enums are bad\"></p>\n<p>And I agree</p>\n<p>So... why are we learning enums?</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"rust-enums-are-incredible\">Rust enums are incredible</h2>\n<p>They are nothing like TypeScript&#39;s enums, and a reason why rust, for a static\ntyped language, is so good.</p>\n<br />\n\n<p>So lets go over a basic set of examples</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"typescript\">TypeScript</h2>\n<ul>\n<li>Create an enum <code>Color</code> with <code>Red</code>, <code>Blue</code>, and <code>Green</code> fields.</li>\n<li>Create a <code>printColor</code> method that prints out &quot;red&quot; for <code>Red</code>, ...</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"full-code\">Full Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n  <span class=\"hljs-title class_\">Red</span>,\n  <span class=\"hljs-title class_\">Green</span>,\n  <span class=\"hljs-title class_\">Blue</span>,\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printColor</span>(<span class=\"hljs-params\">color: Color</span>) {\n  <span class=\"hljs-keyword\">switch</span> (color) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Red</span>:\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;red&quot;</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>:\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;green&quot;</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>:\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;blue&quot;</span>);\n      <span class=\"hljs-keyword\">break</span>;\n  }\n}\n\n<span class=\"hljs-title function_\">printColor</span>(<span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>);\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-do-the-same-thing-in-rust\">Lets do the same thing in Rust</h2>\n<p>Exact same thing</p>\n<ol>\n<li>the syntax for an equivalent enum in rust is 100% identical to ts</li>\n<li>use <code>match</code> to get <em>near</em> equivalent behavior of <code>switch</code></li>\n</ol>\n<p>i&#39;ll give you ~2 minutes, then i&#39;ll start</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n    Red,\n    Green,\n    Blue,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">print_color</span>(color: Color) {\n    <span class=\"hljs-keyword\">match</span> color {\n        Color::Red =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;red&quot;</span>),\n        Color::Green =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;green&quot;</span>),\n        Color::Blue =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;blue&quot;</span>),\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-title function_ invoke__\">print_color</span>(Color::Green);\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"ok\">ok...?</h2>\n<p>They seem the same...</p>\n<p>Ok... lets extend our original example</p>\n<p>Lets add <code>Yellow</code></p>\n<p>I&#39;ll give you a moment with <code>TypeScript</code></p>\n<p>(follow along pls and make you type out the full example)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n  <span class=\"hljs-title class_\">Red</span>,\n  <span class=\"hljs-title class_\">Yellow</span>,\n  <span class=\"hljs-title class_\">Green</span>,\n  <span class=\"hljs-title class_\">Blue</span>,\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printColor</span>(<span class=\"hljs-params\">color: Color</span>) {\n  <span class=\"hljs-keyword\">switch</span> (color) {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Red</span>:\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;red&quot;</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>:\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;green&quot;</span>);\n      <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Blue</span>:\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;blue&quot;</span>);\n      <span class=\"hljs-keyword\">break</span>;\n  }\n}\n\n<span class=\"hljs-title function_\">printColor</span>(<span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>);\n</code></pre>\n<h2 id=\"rusts-turn\">Rust&#39;s turn</h2>\n<p>Upgrade the enum in rust.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n    Red,\n    Yellow,\n    Green,\n    Blue,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">print_color</span>(color: Color) {\n    <span class=\"hljs-keyword\">match</span> color {\n        Color::Red =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;red&quot;</span>),\n        Color::Yellow =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;yellow&quot;</span>),\n        Color::Green =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;green&quot;</span>),\n        Color::Blue =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;blue&quot;</span>),\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-title function_ invoke__\">print_color</span>(Color::Green);\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"ok-1\">Ok...</h2>\n<p>I still think enums suck.. I mean technically it was the <code>match</code> statement that\nmade rust so good, not the enum itself. <br/></p>\n<p>Lets take enum&#39;s to another level</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-create-some-helpers\">Lets create some helpers!</h2>\n<p>Lets create two methods</p>\n<ul>\n<li>is_green<ul>\n<li>return true for green</li>\n</ul>\n</li>\n<li>is_green_parts<ul>\n<li>return true for blue and yellow</li>\n</ul>\n</li>\n</ul>\n<p>first, lets create this only in Rust. I&#39;ll give you a couple moments to try on\nyour own. (you should always try to follow along, it will deeply help with your\nlearnings!)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"next-complete-code\">Next complete code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Color</span> {\n    Red,\n    Yellow,\n    Green,\n    Blue,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Color</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_green_parts</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Color::Yellow =&gt; <span class=\"hljs-literal\">true</span>,\n            Color::Blue =&gt; <span class=\"hljs-literal\">true</span>,\n            _ =&gt; <span class=\"hljs-literal\">false</span>,\n        }\n    }\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">is_green</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Color</span>::Green = <span class=\"hljs-keyword\">self</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">print_color</span>(color: Color) {\n    <span class=\"hljs-keyword\">match</span> color {\n        Color::Red =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;red&quot;</span>),\n        Color::Green =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;green&quot;</span>),\n        Color::Blue =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;blue&quot;</span>),\n        Color::Yellow =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;yellow&quot;</span>),\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-title function_ invoke__\">print_color</span>(Color::Red);\n    Color::Green.<span class=\"hljs-title function_ invoke__\">is_green</span>();\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"ok-are-you-impressed-yet\">Ok... are you impressed yet?</h2>\n<p>well, you shouldn&#39;t be. this isn&#39;t awesome yet</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"one-small-argument\">One small argument</h2>\n<p>Most of what rust can do, javascript can do, but differently.</p>\n<p>You could imagen that a javascript module exists for <code>Color</code> where the function\n<code>is_green</code> and <code>is_green_parts</code> are defined and exported. But i would argue\nthat having to peruse through a module to know what operations are supported is\nnot nearly as nice as having them hang off the struct itself. And in this\ncase, the enum</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Color</span>, { is_green } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./colors&quot;</span>;\n\n<span class=\"hljs-comment\">// this is simply not as convenient as green.is_green();</span>\n<span class=\"hljs-keyword\">const</span> green = <span class=\"hljs-title class_\">Color</span>.<span class=\"hljs-property\">Green</span>;\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">is_green</span>(green)) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;i am green&quot;</span>);\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"you-may-get-offended\">You may get offended...</h2>\n<p>First, lets start with typescript</p>\n<ul>\n<li><p>create a custom type called <code>Custom</code></p>\n<ul>\n<li>it should have 2 fields, <code>age: number</code>, and <code>name: string</code></li>\n</ul>\n</li>\n<li><p>create a union type <code>Item</code> that is <code>number | string | Custom</code></p>\n</li>\n<li><p>create a method <code>append</code> to take in a list of <code>Item</code>s and push in the string <code>&quot;Hello Fem!&quot;</code></p>\n</li>\n<li><p>create an <code>Item</code>s array (doesn&#39;t matter if its empty or not)</p>\n</li>\n<li><p>pass it to <code>append</code></p>\n</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-3\">Complete Code</h2>\n<p>TypeScript</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Custom</span> = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;\n};\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-title class_\">Custom</span> | <span class=\"hljs-built_in\">string</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">append</span>(<span class=\"hljs-params\">items: Item[]</span>) {\n  items.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;hello fem&quot;</span>);\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">items</span>: <span class=\"hljs-title class_\">Item</span>[] = [];\n<span class=\"hljs-title function_\">append</span>(items);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(items);\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"one-more-task\">One more task</h2>\n<ul>\n<li>create a list of <code>number</code> and pass it to <code>append</code></li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"how-do-you-feel\">How do you feel?</h2>\n<p>Do you feel you have been lied to?</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"the-rust-way\">The rust way</h2>\n<p>Lets do the same thing, but this time the rust way, and we will do it together.</p>\n<h4 id=\"instructions-in-case-you-forgot\">Instructions (in case you forgot)</h4>\n<ul>\n<li><p>create a custom struct called <code>Custom</code></p>\n<ul>\n<li>it should have 2 fields, <code>age: number</code>, and <code>name: string</code></li>\n</ul>\n</li>\n<li><p>create a union type <code>Item</code> that is <code>number | string | Custom</code></p>\n</li>\n<li><p>create a method <code>append</code> to take in a list of <code>Item</code>s and push in the string <code>&quot;Hello Fem!&quot;</code></p>\n</li>\n<li><p>create an <code>Item</code>s array (doesn&#39;t matter if its empty or not)</p>\n</li>\n<li><p>pass it to <code>append</code></p>\n</li>\n<li><p>create a <code>Vec&lt;usize&gt;</code></p>\n</li>\n<li><p>try to pass it to <code>append</code></p>\n</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<p>Rust</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Custom</span> {\n    name: <span class=\"hljs-type\">String</span>,\n    age: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Item</span> {\n    <span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-type\">usize</span>),\n    <span class=\"hljs-title function_ invoke__\">Custom</span>(Custom),\n    <span class=\"hljs-title function_ invoke__\">String</span>(<span class=\"hljs-type\">String</span>),\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">append</span>(items: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;Item&gt;) {\n    items.<span class=\"hljs-title function_ invoke__\">push</span>(Item::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">1</span>));\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">items</span>: <span class=\"hljs-type\">Vec</span>&lt;Item&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-title function_ invoke__\">append</span>(&amp;<span class=\"hljs-keyword\">mut</span> items);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">just_numbers</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-title function_ invoke__\">append</span>(&amp;<span class=\"hljs-keyword\">mut</span> just_numbers); <span class=\"hljs-comment\">// errors</span>\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"pretty-dang-cool\">Pretty dang cool?</h2>\n<p>This means no more</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&quot;number&quot;</span>) {\n    ...\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;bar&quot;</span> <span class=\"hljs-keyword\">in</span> x) {\n    ...\n}\n</code></pre>\n<p>So no more &quot;magic&quot; checking for types, you get named types and this works very\nwell with non type discriminated unions (what we made). This is because the\ndiscrimination exists at a language level, not a <code>type: string</code> level</p>\n<h4 id=\"its-not-all-magic\">its not all magic</h4>\n<p>Sometimes code can become a bit more verbose because of this, and that isn&#39;t as\nnice to write. But at the same time, it prevents easy errors where you forgot\nto handle cases.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-talk-about-pattern-matching\">Lets talk about Pattern Matching</h2>\n<p>Its incredible, and you can DO a lot. Check this out</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Custom</span> {\n    name: <span class=\"hljs-type\">String</span>,\n    age: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Item</span> {\n    <span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-type\">usize</span>),\n    <span class=\"hljs-title function_ invoke__\">Custom</span>(Custom),\n    <span class=\"hljs-title function_ invoke__\">String</span>(<span class=\"hljs-type\">String</span>),\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = Item::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">match</span> &amp;foo {\n        Item::<span class=\"hljs-title function_ invoke__\">Number</span>(num) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;i am a number: {}&quot;</span>, num),\n        Item::<span class=\"hljs-title function_ invoke__\">String</span>(<span class=\"hljs-type\">str</span>) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;i am a string: {}&quot;</span>, <span class=\"hljs-type\">str</span>),\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;name: {}, age: {}&quot;</span>, custom.name, custom.age),\n    }\n\n    <span class=\"hljs-keyword\">match</span> &amp;foo {\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;name: {}, age: {}&quot;</span>, custom.name, custom.age),\n        _ =&gt; {}\n    }\n\n    <span class=\"hljs-keyword\">match</span> &amp;foo {\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(Custom {\n            age,\n            ..\n        }) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;age: {}&quot;</span>, age),\n        _ =&gt; {}\n    }\n\n    <span class=\"hljs-keyword\">match</span> &amp;foo {\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) <span class=\"hljs-keyword\">if</span> custom.name == <span class=\"hljs-string\">&quot;Ricky&quot;</span> =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Hi, Ricky&quot;</span>),\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) <span class=\"hljs-keyword\">if</span> custom.age &gt; <span class=\"hljs-number\">33</span> =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;N64 was the best console&quot;</span>),\n        Item::<span class=\"hljs-title function_ invoke__\">Custom</span>(custom) <span class=\"hljs-keyword\">if</span> custom.age &lt; <span class=\"hljs-number\">30</span>  =&gt;\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;Xbox was the best console&quot;</span>),\n        _ =&gt; {}\n    }\n}\n</code></pre>\n<p>There are SO many problems that can be solved by good pattern matching, its\nwild.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"questions\">Questions?</h2>\n<p>Do you understand how pattern matching works?</p>\n<br/>\n\n<p><strong>if you have a question speak up!!!</strong></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n","slug":"is-for-enums","title":"Rust Enums","section":"Coding Rust","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/02-coding-rust/B-is-for-enums.md","nextSlug":"/rust-for-typescript-devs/lessons/coding-rust/options","prevSlug":"/rust-for-typescript-devs/lessons/coding-rust/iterators"}},"__N_SSG":true}
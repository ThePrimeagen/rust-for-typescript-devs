{"pageProps":{"post":{"attributes":{"title":"Iterators","description":"Iterators in rust are sooo much better."},"html":"<h2 id=\"ok-lets-start-coding\">Ok lets start coding.</h2>\n<p>enough of this talking biz, its coding time. I have always been under the\nimpression its easier to learn with my hands than my eyes.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"to-begin-with-there-are-2-things-that-have-to-be-understood-in-rust\">To begin with, There are 2 things that have to be understood in Rust</h2>\n<p>This is for fundamental understanding of the language.</p>\n<ol>\n<li>Iterators</li>\n<li>Enums</li>\n</ol>\n<p>Once you get these two, it becomes easier to work with rust initially. As these\nconcepts are a bit wonkey coming from TypeScript.</p>\n<br />\n\n<p><strong>You are even probably thinking...</strong> &quot;I use iterators all the time and enums are\nhorrible!&quot;</p>\n<br />\n\n<p>From a typescript perspective you are right and from a rust perspective, you\nare wrong.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-start-with-iterators\">Lets start with iterators</h2>\n<p>(first basic whiteboard explanation)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"iterators\">Iterators</h2>\n<p>I think iterators will make the easiest transition as they have the strongest\nsimilarity in javascript.</p>\n<p>and we can start with <code>.map</code></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"quick-example-in-typescript\">Quick example in TypeScript</h2>\n<p>Lets go over a quick example in typescript</p>\n<p>Lets create a script that:</p>\n<ul>\n<li>creates an list initialized with 1, 2, 3</li>\n<li>adds 1 to each item in that list</li>\n<li>prints the list</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// what happens here?</span>\n<span class=\"hljs-keyword\">const</span> foo = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo);\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"quick-example-in-rustlang\">Quick example in Rustlang</h2>\n<p>Now lets do it in rust!</p>\n<ul>\n<li>(in case you forgot) a closure is defined</li>\n</ul>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-comment\">// defining a closure</span>\n|x| {\n    <span class=\"hljs-comment\">//... body with a return</span>\n    <span class=\"hljs-keyword\">return</span> x * <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-comment\">// without body</span>\n|x| x * <span class=\"hljs-number\">5</span>\n</code></pre>\n<p>See how far you can get on your own!</p>\n<ul>\n<li>do you remember how to define a vector? <code>vec![...]</code></li>\n<li>to iterator over references <code>.iter()</code></li>\n<li>map it</li>\n<li>but... how to get an iterator back to a vector... (<code>collect</code>)</li>\n</ul>\n<p>(in case you forgot)</p>\n<ul>\n<li>creates an list filled with 1, 2, 3</li>\n<li>adds 1 to each item in that list</li>\n<li>prints the list<ul>\n<li>debug print works on vectors auto<em>magically</em> <code>println!(&quot;{:?}&quot;, foo);</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">isize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n        .<span class=\"hljs-title function_ invoke__\">iter</span>() <span class=\"hljs-comment\">// create the iterator to go over the elements in teh array</span>\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|x| x + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// do the plus one&#x27;ings</span>\n        .<span class=\"hljs-title function_ invoke__\">collect</span>(); <span class=\"hljs-comment\">// take the iterator and put it somewhere..</span>\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;items {:?}&quot;</span>, items);\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"what-is-collect\">What is collect?</h2>\n<p>One thing that is different than you may be use to is that an <code>Iterator</code> is its\nown data type. So we must convert from an iterator back into the struct we\nwant and in our case its a <code>Vec</code></p>\n<p>So lets do this manually</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">iter</span> = items\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|x| x + <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">collected_items</span> = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(value) = iter.<span class=\"hljs-title function_ invoke__\">next</span>() {\n        collected_items.<span class=\"hljs-title function_ invoke__\">push</span>(value);\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;collected_items: {:?}&quot;</span>, collected_items);\n}\n</code></pre>\n<p>Its sometimes easy to think things magic when they are not, its literally, in\nour example, a simple while loop</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"wanna-see-something-cool-with-collect\">Wanna see something cool with collect?</h2>\n<p>Well, collect is more that just &quot;put back into a vector&quot;</p>\n<p>(show them the deets, String, HashSet, HashMap)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<p>Collect into string!</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span>: <span class=\"hljs-type\">String</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;this&quot;</span>, <span class=\"hljs-string\">&quot;is&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;test&quot;</span>]\n    .<span class=\"hljs-title function_ invoke__\">into_iter</span>() <span class=\"hljs-comment\">// what the heck is this?  we will talk more about this</span>\n    .<span class=\"hljs-title function_ invoke__\">collect</span>();\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<p>Collect into HashSet (this would be Set in JS)</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span>: HashSet&lt;<span class=\"hljs-type\">isize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    .<span class=\"hljs-title function_ invoke__\">into_iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">collect</span>();\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<p>Collect into a HashMap</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span>: HashMap&lt;&amp;<span class=\"hljs-type\">str</span>, <span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;this&quot;</span>, <span class=\"hljs-string\">&quot;is&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;test&quot;</span>]\n    .<span class=\"hljs-title function_ invoke__\">into_iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">enumerate</span>() <span class=\"hljs-comment\">// Adds the index to the iterator!</span>\n                 <span class=\"hljs-comment\">// one of the glories of rust is that we work with iterators</span>\n    .<span class=\"hljs-title function_ invoke__\">map</span>(|(idx, item)| (item, idx)) <span class=\"hljs-comment\">// reverses the order</span>\n    .<span class=\"hljs-title function_ invoke__\">collect</span>();\n</code></pre>\n<p><code>map(|(idx, item)|</code> is an example of destructuring.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"we-are-going-to-play-a-game\">We are going to play a game</h2>\n<p>this will help you see whats possible</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"what-is-value\">What is value?</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">value</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    .<span class=\"hljs-title function_ invoke__\">iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">sum</span>();\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">how_many_items</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    .<span class=\"hljs-title function_ invoke__\">iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">2</span>)\n    .<span class=\"hljs-title function_ invoke__\">count</span>();\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"what-will-i-print\">What will i print?</h2>\n<pre><code class=\"hljs language-rust\">    <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>]\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">2</span>)\n        .<span class=\"hljs-title function_ invoke__\">take_while</span>(|&amp;&amp;x| x &gt; <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// i can explain the &amp;&amp; later,</span>\n                                 <span class=\"hljs-comment\">// but know its pattern matching</span>\n        .<span class=\"hljs-title function_ invoke__\">for_each</span>(|x| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, x));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">what_about_this</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    .<span class=\"hljs-title function_ invoke__\">iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">filter</span>(|x| *x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// we will explain the * later</span>\n    .<span class=\"hljs-title function_ invoke__\">count</span>();\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"iterators-from-other-collections\">Iterators from other collections!</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">map</span> = HashMap::<span class=\"hljs-title function_ invoke__\">from</span>([\n   (<span class=\"hljs-string\">&quot;foo&quot;</span>, <span class=\"hljs-number\">1</span>),\n   (<span class=\"hljs-string\">&quot;bar&quot;</span>, <span class=\"hljs-number\">2</span>),\n   (<span class=\"hljs-string\">&quot;baz&quot;</span>, <span class=\"hljs-number\">3</span>),\n]);\n\nmap\n    .<span class=\"hljs-title function_ invoke__\">iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">for_each</span>(|(k, v)| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}: {}&quot;</span>, k, v));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">set</span> = HashSet::<span class=\"hljs-title function_ invoke__\">from</span>([\n    <span class=\"hljs-string\">&quot;foo&quot;</span>,\n    <span class=\"hljs-string\">&quot;bar&quot;</span>,\n    <span class=\"hljs-string\">&quot;baz&quot;</span>,\n]);\n\nset\n    .<span class=\"hljs-title function_ invoke__\">iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">for_each</span>(|v| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, v));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"you-can-even-create-your-own-iterators\">You can even create your own iterators!</h2>\n<p>We will soon, but here is a basic example!</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">todos</span> = Todo { ... values ... }\n\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">task</span> <span class=\"hljs-keyword\">in</span> &amp;todos { <span class=\"hljs-comment\">// requires trait implementations</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;I need to do: {}&quot;</span>, task); <span class=\"hljs-comment\">// require trait implementations</span>\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"iterator-way-of-thinking\">Iterator way of thinking</h2>\n<p>This is an important concept which isn&#39;t in javascript</p>\n<pre><code>[Type] -&gt; [Iterator] -&gt; [Type]\n</code></pre>\n<p>This typically gives us code that looks like.</p>\n<pre><code class=\"hljs language-rust\">some_type\n    .<span class=\"hljs-title function_ invoke__\">iter</span>() <span class=\"hljs-comment\">// creates iterator</span>\n    .<span class=\"hljs-title function_ invoke__\">filter</span>(|x| ...\n\n    ) <span class=\"hljs-comment\">// A series of combinators</span>\n\n    .collect/sum/count/<span class=\"hljs-title function_ invoke__\">for_each</span>() <span class=\"hljs-comment\">// some operation that takes the iterator and consumes it</span>\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-do-a-simple-exercise\">Lets do a simple exercise</h2>\n<p>Lets do the following.</p>\n<ol>\n<li>create this file called <code>project/lines</code></li>\n</ol>\n<pre><code class=\"hljs language-bash\">hello\nfem\nhow\n1\n2\n3\nare\nyou?\n</code></pre>\n<ol>\n<li>read file <code>lines</code></li>\n<li>print out each line individually</li>\n</ol>\n<br />\n\n<h4 id=\"typescript\"><strong>TypeScript</strong></h4>\n<p>I&#39;ll give you a few moments to try this yourself</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> file = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&quot;lines&quot;</span>);\n\nfile\n  .<span class=\"hljs-title function_\">toString</span>()\n  .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\n  .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">line</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(line));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-do-the-same-in-rust\">Lets do the same in Rust</h2>\n<p>Since you are new, i&#39;ll have to walk through each line of code. <br/>\n<br/>\nJust in case you forgot</p>\n<ol>\n<li>read a file from disk</li>\n<li>print out each line individually</li>\n</ol>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-3\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">file</span> = std::fs::<span class=\"hljs-title function_ invoke__\">read_to_string</span>(<span class=\"hljs-string\">&quot;lines&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n\n    file\n        .<span class=\"hljs-title function_ invoke__\">lines</span>()\n        .<span class=\"hljs-title function_ invoke__\">for_each</span>(|line| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, line));\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"how-about-every-other-line\">How about every other line?</h2>\n<p>Add a few more lines to your test file and then implement it in TypeScript</p>\n<p>I&#39;ll give you ~1 minute to do this</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-4\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> file = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&quot;lines&quot;</span>);\n\nfile\n  .<span class=\"hljs-title function_\">toString</span>()\n  .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\n  .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)\n  .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">line</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(line));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"but-how-to-do-this-in-rust\">But how to do this in rust?</h2>\n<p>You have seen me mention <code>.enumerate()</code> <code>.filter(|x| ...)</code> thus far, why not\ntake 1 minute and see if you can update your code to take every other!</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-5\">Complete Code</h2>\n<p>Observation: Rust does exactly what you tell it and no more.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">file</span> = std::fs::<span class=\"hljs-title function_ invoke__\">read_to_string</span>(<span class=\"hljs-string\">&quot;lines&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n\n    file\n        .<span class=\"hljs-title function_ invoke__\">lines</span>()\n        .<span class=\"hljs-title function_ invoke__\">enumerate</span>()\n        .<span class=\"hljs-title function_ invoke__\">filter</span>(|(idx, _)| idx % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n        .<span class=\"hljs-title function_ invoke__\">for_each</span>(|line| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, line.<span class=\"hljs-number\">1</span>));\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"one-more\">One more</h2>\n<p>do these steps <em>IN ORDER</em>.</p>\n<ul>\n<li>every other line</li>\n<li>skip the first two lines</li>\n<li>print two lines</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-6\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> file = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">&quot;lines&quot;</span>);\n\nfile\n  .<span class=\"hljs-title function_\">toString</span>()\n  .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\n  .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)\n  .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i &gt;= <span class=\"hljs-number\">2</span> &amp;&amp; i &lt; <span class=\"hljs-number\">4</span>)\n  .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">line</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(line));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"now-rust\">Now Rust</h2>\n<p>Remember when i said rust has an amazing combinator set? Its time to shine</p>\n<p>i think you should give it a try</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-7\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">file</span> = std::fs::<span class=\"hljs-title function_ invoke__\">read_to_string</span>(<span class=\"hljs-string\">&quot;lines&quot;</span>).<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n\n    file\n        .<span class=\"hljs-title function_ invoke__\">lines</span>()\n        .<span class=\"hljs-title function_ invoke__\">enumerate</span>()\n        .<span class=\"hljs-title function_ invoke__\">filter</span>(|(idx, _)| idx % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n        .<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">2</span>)\n        .<span class=\"hljs-title function_ invoke__\">take</span>(<span class=\"hljs-number\">2</span>)\n        .<span class=\"hljs-title function_ invoke__\">for_each</span>(|line| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, line.<span class=\"hljs-number\">1</span>));\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-break-down-what-happened\">Lets break down what happened</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\n  .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>)\n  .<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> i &gt;= <span class=\"hljs-number\">2</span> &amp;&amp; i &lt; <span class=\"hljs-number\">4</span>)\n  .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">line</span>) =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(line));\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"split\">Split</h2>\n<p>that takes substrings and creates an array.</p>\n<p>That means calling <code>split</code> iterates the entire string up front and creates a\nlist</p>\n<pre><code class=\"hljs language-typescript\">[\n    <span class=\"hljs-string\">&quot;line1&quot;</span>,\n    <span class=\"hljs-string\">&quot;line2&quot;</span>,\n    ...\n]\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"what-about-filter\">What about filter?</h2>\n<p>Filter takes in a list and produces a new list</p>\n<pre><code class=\"hljs language-typescript\">[\n    <span class=\"hljs-string\">&quot;line1&quot;</span>,\n    <span class=\"hljs-string\">&quot;line2&quot;</span>,\n    ...\n] =&gt; [\n    <span class=\"hljs-string\">&quot;line2&quot;</span>,\n    <span class=\"hljs-string\">&quot;line4&quot;</span>,\n    ...\n]\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"the-second-filter\">The second filter</h2>\n<pre><code class=\"hljs language-typescript\">[\n    <span class=\"hljs-string\">&quot;line1&quot;</span>,\n    <span class=\"hljs-string\">&quot;line2&quot;</span>,\n    ...\n] =&gt; [\n    <span class=\"hljs-string\">&quot;line2&quot;</span>,\n    <span class=\"hljs-string\">&quot;line4&quot;</span>,\n    ...\n] =&gt; [ <span class=\"hljs-comment\">// no matter how many lines were before, it goes through ALL</span>\n    <span class=\"hljs-string\">&quot;line6&quot;</span>,\n    <span class=\"hljs-string\">&quot;line8&quot;</span>,\n]\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"for-each\">for each</h2>\n<p>This just goes through each item in the final array, i approve</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"so-what-does-the-code-produced-ackshually-look-like\">So what does the &quot;code produced&quot; ackshually look like?</h2>\n<p>With javascript its so easy to perform <em>many</em> high level tasks that you forget\nexactly what is happening.</p>\n<p>Here is &quot;transpiled&quot; code</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">filter_1</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">boolean</span> {\n  <span class=\"hljs-keyword\">return</span> x % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">filter_2</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">number</span> {\n  <span class=\"hljs-keyword\">return</span> x &gt;= <span class=\"hljs-number\">2</span> &amp;&amp; x &lt; <span class=\"hljs-number\">4</span>;\n}\n\n<span class=\"hljs-comment\">// Skipping the split operation</span>\n<span class=\"hljs-keyword\">let</span> a = contents.<span class=\"hljs-title function_\">toString</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n<span class=\"hljs-keyword\">let</span> b = [];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.<span class=\"hljs-property\">length</span>; ++i) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">filter_1</span>(a[i])) {\n    b.<span class=\"hljs-title function_\">push</span>(a[i]);\n  }\n}\n<span class=\"hljs-keyword\">let</span> c = [];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; b.<span class=\"hljs-property\">length</span>; ++i) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">filter_2</span>(i)) {\n    c.<span class=\"hljs-title function_\">push</span>(b[i]);\n  }\n}\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; c.<span class=\"hljs-property\">length</span>; ++i) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(c[i]);\n}\n</code></pre>\n<p>v8 may optimize some of this away. To what extent, i don&#39;t have the faintest\nclue and neither do you</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"same-example-but-in-rust\">Same example, but in rust</h2>\n<pre><code class=\"hljs language-rust\">    .<span class=\"hljs-title function_ invoke__\">lines</span>()\n    .<span class=\"hljs-title function_ invoke__\">enumerate</span>()\n    .<span class=\"hljs-title function_ invoke__\">filter</span>(|(idx, _)| idx % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n    .<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">2</span>)\n    .<span class=\"hljs-title function_ invoke__\">take</span>(<span class=\"hljs-number\">2</span>)\n    .<span class=\"hljs-title function_ invoke__\">for_each</span>(|line| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, line.<span class=\"hljs-number\">1</span>));\n\n<span class=\"hljs-comment\">// Goes through every char</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">start</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">taken</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">skipped</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">lines_found</span> = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-title function_ invoke__\">for</span> (idx, c) <span class=\"hljs-keyword\">in</span> lines.<span class=\"hljs-title function_ invoke__\">enumerate</span>().<span class=\"hljs-title function_ invoke__\">chars</span>() {\n    <span class=\"hljs-keyword\">if</span> c !== <span class=\"hljs-string\">&quot;\\n&quot;</span> {\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n\n    <span class=\"hljs-comment\">// doesn&#x27;t copy, just a &amp;str (ptr, len)</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">slice</span> = lines[start..idx];\n    start = idx + <span class=\"hljs-number\">1</span>;\n\n    lines_found += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> lines_found % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">continue</span>\n    }\n\n    <span class=\"hljs-keyword\">if</span> skipped &lt; <span class=\"hljs-number\">2</span> {\n        skipped += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n\n    taken += <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, slice);\n\n    <span class=\"hljs-keyword\">if</span> taken == <span class=\"hljs-number\">2</span> {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"zero-cost-abstractions\">Zero cost abstractions</h2>\n<p>You will see this phrase commonly in the rust community, and this is why. Its\nable to have these higher order abstractions, just without all the cost of them</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"questions\">Questions?</h2>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n","slug":"iterators","title":"Iterators","section":"Coding Rust","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/02-coding-rust/A-iterators.md","nextSlug":"/rust-for-typescript-devs/lessons/coding-rust/is-for-enums","prevSlug":"/rust-for-typescript-devs/lessons/introduction/a-note-about-types"}},"__N_SSG":true}
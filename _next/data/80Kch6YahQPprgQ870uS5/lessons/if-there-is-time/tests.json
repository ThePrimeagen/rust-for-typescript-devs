{"pageProps":{"post":{"attributes":{"title":"Testing in Rust","description":"The testing library is _in_ rust"},"html":"<h2 id=\"unit-tests\">Unit tests</h2>\n<p>Hate them</p>\n<p>Love them</p>\n<p>Whatever</p>\n<p>What matters to me is that the language has first class support for them</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-create-a-test-for-our-rect-and-circle\">Lets create a test for our Rect and Circle</h2>\n<ol>\n<li>create a <code>test</code> in mod.rs</li>\n<li>test <code>Circle</code> vs <code>Circle</code></li>\n</ol>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> crate::shapes::collisions::Collidable;\n\n    <span class=\"hljs-keyword\">use</span> super::Circle;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_circle_collide</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c1</span> = Circle {\n            x: <span class=\"hljs-number\">0.0</span>,\n            y: <span class=\"hljs-number\">0.0</span>,\n            radius: <span class=\"hljs-number\">1.0</span>,\n        };\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c2</span> = Circle {\n            x: <span class=\"hljs-number\">1.5</span>,\n            y: <span class=\"hljs-number\">1.5</span>,\n            radius: <span class=\"hljs-number\">4.0</span>,\n        };\n\n        <span class=\"hljs-built_in\">assert!</span>(!c1.<span class=\"hljs-title function_ invoke__\">collide</span>(&amp;c2), <span class=\"hljs-string\">&quot;expect c1 to not collide with c2&quot;</span>);\n        <span class=\"hljs-built_in\">assert!</span>(c2.<span class=\"hljs-title function_ invoke__\">collide</span>(&amp;c1), <span class=\"hljs-string\">&quot;expect c2 to collide with c1&quot;</span>);\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n","slug":"tests","title":"Testing in Rust","section":"If There Is Time","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/06-if-there-is-time/A-tests.md","nextSlug":"/rust-for-typescript-devs/lessons/if-there-is-time/project-structure","prevSlug":"/rust-for-typescript-devs/lessons/the-end/the-end"}},"__N_SSG":true}
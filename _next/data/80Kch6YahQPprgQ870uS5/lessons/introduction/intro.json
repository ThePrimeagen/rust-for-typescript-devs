{"pageProps":{"post":{"attributes":{"title":"Introduction","description":"The introduction to this course."},"html":"<h2 id=\"rust-for-typescript-devs\">Rust for TypeScript devs</h2>\n<p>i hope you are ready, we will be moving fast today.</p>\n<br />\n<br />\n\n<h4 id=\"schedule\"><strong>Schedule</strong></h4>\n<ul>\n<li>Vector, the basic data structure</li>\n<li>Iterators</li>\n<li>Enums - Result / Option focus</li>\n<li>Traits</li>\n<li>Light touch on memory</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"an-ass-out-of-you-and-i\">An ass out of you and i</h2>\n<p><strong>ASSUMPTION</strong></p>\n<ul>\n<li>I think you are a bad programmer<ul>\n<li>its ok, i am a bad programmer, too. everyone is, except John Carmack.</li>\n</ul>\n</li>\n<li>You can program TypeScript with relative ease.</li>\n<li>You know types, maybe no wizard, but you know types.</li>\n</ul>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// I assume everyone here can easily read this and understand what is happening</span>\n<span class=\"hljs-comment\">// here just by type definitions</span>\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Promiseable</span>&lt;T&gt; = {\n  <span class=\"hljs-attr\">promise</span>: <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  <span class=\"hljs-attr\">resolve</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">value: T</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n  <span class=\"hljs-attr\">reject</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">reason: <span class=\"hljs-built_in\">any</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n};\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">PromiseFactory</span>&lt;T&gt; = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Promiseable</span>&lt;T&gt;;\n\n<span class=\"hljs-keyword\">function</span> explodePromise&lt;T&gt;(): <span class=\"hljs-title class_\">Promiseable</span>&lt;T&gt; {\n  <span class=\"hljs-comment\">// technically there would be some errors here, but just ignore that :)</span>\n  <span class=\"hljs-keyword\">let</span> resolve, reject;\n  <span class=\"hljs-keyword\">let</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res, rej</span>) =&gt;</span> {\n    resolve = res;\n    reject = rej;\n  });\n\n  <span class=\"hljs-keyword\">return</span> {\n    promise,\n    resolve,\n    reject,\n  };\n}\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"why-rust\">Why Rust?</h2>\n<p>There are a bunch of reasons, practically speaking, but for me there are two\nthings that particularly speak to me.</p>\n<br />\n<br />\n\n<h4 id=\"ergonomics\"><strong>Ergonomics</strong></h4>\n<p>This seems like every tweeter thread is mentions something with developer\nergonomics. but what in the world are they always talking about?</p>\n<p>For me, ergonomics is defined on two axes, one quickly being able to write\nsoftware with low unexpected behavior, and two, maintain software longer</p>\n<br />\n<br />\n\n<h4 id=\"javascriptsts-vs-rust-design-decisions\"><strong>JavaScripts(TS) vs Rust design decisions</strong></h4>\n<ul>\n<li>Specify Readonly vs Specify Mutability</li>\n<li>undefined/null vs Option</li>\n<li>errors being thrown vs being returned</li>\n</ul>\n<br />\n<br />\n\n<h4 id=\"skill-gap\"><strong>Skill gap</strong></h4>\n<p>Yes skill gap. What do i mean by this?</p>\n<br />\n<br />\n\n<h4 id=\"javascript--typescript\"><strong>JavaScript / TypeScript</strong></h4>\n<p>JavaScript itself is a rather simple language. To become proficient in it is\nrather small task comparatively. The place you spend most of your time is\nlearning how to use libraries and dealing with oddities.</p>\n<p>When it comes to TypeScript you have a very complex (intentional) typesystem\nthat isn&#39;t typesafe.</p>\n<p>I find that it can be hard to refactor larger typescript libraries as their\ntypings become inherently complex</p>\n<h2 id=\"\"><br /></h2>\n<br />\n<br />\n\n<h4 id=\"rust\"><strong>Rust</strong></h4>\n<p>There are many deep topics within the language itself that it takes\nsignificantly more time to master each of these. To me this makes me excited\nbecause there are a lot of ways you can improve how you write software</p>\n<p>I have explicitly planned one such of these adventures to show some of the\npower of knowing rusts std and traits</p>\n<p>The language is simply deeper itself, not just use of libraries. You have\ncomplete control over where and how memory is used, and this can lead to some\nvery cool things.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"goals-for-today\">Goals for today</h2>\n<p>My goal today is that you end with enough knowledge to be able to google your\nway through a small to mid sized cli application in rust</p>\n<h4 id=\"what-we-wont-cover\"><strong>What we wont cover</strong></h4>\n<ul>\n<li>Errors - creating your own types</li>\n<li>Wasm / UI</li>\n<li>async</li>\n<li>smart pointers and interior mutability</li>\n<li>lifetimes - WHY NOT??</li>\n<li>macros, both proc macros and declarative macros<ul>\n<li>these truly make rust amazing</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-comment\">// ------v that is a macro!!!</span>\n<span class=\"hljs-keyword\">return</span> view! {\n    &lt;div&gt;\n        &lt;MyCustomComponent name=<span class=\"hljs-string\">&quot;hello&quot;</span> /&gt;\n    &lt;/div&gt;\n};\n</code></pre>\n<p>I want you to be able to <em>use</em> rust. You can learn the deep concepts on your\nown.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"who-am-i\">Who am I?</h2>\n<p>I am best known for my role at TheStartupâ„¢, which is CEO, CEO, CEO, CEO, and\nChairmen of the board.</p>\n<p><img src=\"/rust-for-typescript-devs/./images/youtube.png\" alt=\"Youtube\">\n<img src=\"/rust-for-typescript-devs/./images/twitch.png\" alt=\"Twitch\"></p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n","slug":"intro","title":"Introduction","section":"Introduction","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/01-introduction/A-intro.md","nextSlug":"/rust-for-typescript-devs/lessons/introduction/basic-diff","prevSlug":null}},"__N_SSG":true}
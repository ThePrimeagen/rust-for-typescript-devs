{"pageProps":{"post":{"attributes":{"title":"Rust Basics","description":"Some basics about rust.  Vectors & unwrap"},"html":"<h2 id=\"did-you-remember-everything-i-just-said\">Did you remember everything I just said?</h2>\n<p>Of course not. Learning a language that is not so different from yours is\nnice, but unless you put it into practice, you will literally forget\neverything.</p>\n<br />\n\n<p>We will be putting these into practice, i just wanted to get through this as\nfast as possible to get to the fun parts.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"basics-on-rust\">Basics on Rust</h2>\n<p>Just some basics so we can understand things going forward</p>\n<br />\n\n<p>When you are starting out using rust you should see</p>\n<ol>\n<li><code>unwrap</code>s</li>\n<li><code>clone</code>s</li>\n</ol>\n<br />\n\n<p>That is totally normal, completely fine. understanding, at least for me, comes\nin waves. The more I understand, the more I realize I understand less.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"lets-start-learning-starting-with-a-vector\">Lets start learning! Starting with a Vector</h2>\n<p><code>Vec</code> (rust) and <code>[]</code> (typescript) are very similar. Their behaviors are near\nidentical.</p>\n<p>these two are functionally equivalent</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"mutation\">Mutation</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\na.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6] // returns size</span>\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\na.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// Error: a is not mutable</span>\n\n<span class=\"hljs-comment\">// but with rust we can shadow</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = a;\na.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">//  [1, 2, 3, 4, 5, 6] // does not return size</span>\n</code></pre>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\na.<span class=\"hljs-title function_\">pop</span>(); <span class=\"hljs-comment\">// [1, 2, 3, 4] undefined or T</span>\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\na.<span class=\"hljs-title function_ invoke__\">pop</span>(); <span class=\"hljs-comment\">//  [1, 2, 3, 4] Option&lt;T&gt;</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"accessing-data\">Accessing Data</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n<span class=\"hljs-keyword\">const</span> item = a[<span class=\"hljs-number\">2</span>];\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = a[<span class=\"hljs-number\">2</span>]; <span class=\"hljs-comment\">// does work, but if out of bounds, panic</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">item</span> = a.<span class=\"hljs-title function_ invoke__\">get</span>(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// better, returns Option&lt;T&gt; where T can be i32</span>\n</code></pre>\n<p>An <code>Option&lt;T&gt;</code> is a possible undefined value. All things could be undefined,\nmust be specified with an <code>Option</code></p>\n<p>we will talk about enums and Options in depth shortly</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"gentle-reminder-now-you-will-forget-everything-we-just-said\">Gentle Reminder: Now you will forget everything we just said</h2>\n<p>But to help you not forget, we will start doing some exercises soon.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"tuple\">Tuple</h2>\n<p>This doesn&#39;t really have a similarity in javascript.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = (<span class=\"hljs-number\">5</span>, <span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>)); <span class=\"hljs-comment\">// this type is (i32, String)</span>\n</code></pre>\n<p>it is &quot;near&quot; equivalent to</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> a = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;hello&quot;</span>];\n</code></pre>\n<p>You can pattern match (think destructuring) tuples.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = (<span class=\"hljs-number\">5</span>, <span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>)); <span class=\"hljs-comment\">// this type is (i32, String)</span>\n\n<span class=\"hljs-comment\">// you probably best know this as destructuring, but we will refer to this</span>\n<span class=\"hljs-comment\">// as pattern matching.</span>\n<span class=\"hljs-keyword\">let</span> (my_num, my_str) = a;\n</code></pre>\n<p>You can even pattern match in a function</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span> = (<span class=\"hljs-number\">5</span>, <span class=\"hljs-type\">String</span>::<span class=\"hljs-title function_ invoke__\">from</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>)); <span class=\"hljs-comment\">// this type is (i32, String)</span>\n\n<span class=\"hljs-comment\">// you can even pattern match on functions.</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">bar</span>((my_num, my_str): (<span class=\"hljs-type\">i32</span>, <span class=\"hljs-type\">String</span>)) {\n}\n\n<span class=\"hljs-title function_ invoke__\">bar</span>(a);\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"structs\">Structs</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MyStruct</span> {\n    x: <span class=\"hljs-type\">usize</span>,\n    y: <span class=\"hljs-type\">usize</span>,\n    z: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">bar</span>(MyStruct { y, z, .. }: MyStruct) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n    <span class=\"hljs-keyword\">return</span> y * z &lt; <span class=\"hljs-number\">100</span>;\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = MyStruct {\n        x: <span class=\"hljs-number\">69</span>,\n        y: <span class=\"hljs-number\">420</span>,\n        z: <span class=\"hljs-number\">1337</span>,\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">MyStruct</span> { x, .. } = foo;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">MyStruct</span> { y, z, .. } = foo;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">MyStruct</span> { x, y, z } = foo;\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">MyStruct</span> { x, .. } = foo {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;things about x {}&quot;</span>, x)\n    }\n\n}\n</code></pre>\n<p>You can solve such crazy problems with pattern matching</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"unwrap-todo-and-unreachables\">unwrap, todo, and unreachables</h2>\n<p>These are things that only exist within Rust and may be a bit confusing.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"todo\">TODO:</h2>\n<p>I particularly like this as it allows for me to do <code>// TODO:</code> but i am forced\nto handle it in rust</p>\n<p>Lets show an example</p>\n<p>(code time)</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"unreachable\">Unreachable</h2>\n<p>This unsures that the program behaves properly.</p>\n<p>think of it like an assert statement.</p>\n<p>lets do a quick example</p>\n<p>(code time)</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"unwrap\">Unwrap</h2>\n<p>when you are new to rust, <code>unwrap</code>s are your friend. You will end up using\nthem a lot because you don&#39;t know the language / tools available to you yet.\nOften you feel like you don&#39;t know how to handle some basic operations and\nunwrap can be your friend.</p>\n<p>You learn by doing, you learn better by doing wrong</p>\n<p>But!!! if you unwrap an Error or an undefined, your program crashes... so...\ndon&#39;t do it.</p>\n<p>Let me give you a quick example of that.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n","slug":"rust-basics","title":"Rust Basics","section":"Introduction","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/01-introduction/D-rust-basics.md","nextSlug":"/rust-for-typescript-devs/lessons/introduction/installation","prevSlug":"/rust-for-typescript-devs/lessons/introduction/numbers-and-strings"}},"__N_SSG":true}
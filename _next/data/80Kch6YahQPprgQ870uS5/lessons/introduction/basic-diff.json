{"pageProps":{"post":{"attributes":{"title":"The Basics: Syntax","description":"An important second lesson"},"html":"<h2 id=\"the-basics\">The Basics</h2>\n<p>remember my <strong>ASSUMPTIONS</strong>? Time to make good on that...</p>\n<br />\n\n<p>We are going to spend a short period of time just going over differences\nbetween the two languages and some specific rust only features.</p>\n<br />\n\n<p>So there is going to be no programming, its meant to get you familiar with\nwords and ideas.</p>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"variable\">Variable</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// sort of constant</span>\n<span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// definitely not constant</span>\n<span class=\"hljs-keyword\">const</span> foo = [] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>; <span class=\"hljs-comment\">// const pointer to a constant..</span>\n<span class=\"hljs-comment\">// i understand if you don&#x27;t c the joke</span>\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// constant</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">foo</span> = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// mutable</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"shadowing\">Shadowing</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">const</span> foo = [...];\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-title function_\">someMethod</span>(foo);\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = [...];  <span class=\"hljs-comment\">// I am of Type A</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">foo</span> = <span class=\"hljs-title function_ invoke__\">someMethod</span>(foo); <span class=\"hljs-comment\">// I am of Type B - YA! perfectly fine</span>\n</code></pre>\n<h4 id=\"why-though\">Why though?</h4>\n<p>One thing that makes shadowing amazing is that you can change types.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-title function_\">get_file</span>(args); <span class=\"hljs-comment\">// FileHandle</span>\n<span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-title function_\">read_file</span>(foo); <span class=\"hljs-comment\">// String</span>\n<span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-title function_\">tokenize_and_do_things_to_string</span>(foo); <span class=\"hljs-comment\">// Vec&lt;String&gt;</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"if\">If</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">if</span> (condition &amp;&amp; second || this_one) {\n    ...\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ...\n<span class=\"hljs-keyword\">else</span>\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">if</span> condition &amp;&amp; second || this_one { <span class=\"hljs-comment\">// rust will warn you</span>\n    ...\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ...\n<span class=\"hljs-keyword\">else</span> ...\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"loops\">Loops</h2>\n<h3 id=\"for\">For</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; ++i) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n}\n\n<span class=\"hljs-comment\">// inclusive (includes 10)</span>\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=<span class=\"hljs-number\">10</span> {\n}\n</code></pre>\n<h3 id=\"while\">While</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">true</span> {\n}\n</code></pre>\n<h3 id=\"for-ever\">For ever?</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">for</span> (;;) {\n  <span class=\"hljs-comment\">// while (true) {</span>\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">loop</span> {\n}\n</code></pre>\n<h3 id=\"collections\">Collections?</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [key, value] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(obj)) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> idx <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]) {\n  <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-comment\">// array#map // copies</span>\n<span class=\"hljs-comment\">// array#filter // copies</span>\n<span class=\"hljs-comment\">// array#forEach // iterates</span>\n<span class=\"hljs-comment\">// array#reduce // always a bad decision</span>\n<span class=\"hljs-comment\">// map#forEach // weird interface</span>\n</code></pre>\n<h4 id=\"rust\">Rust</h4>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-keyword\">in</span> &amp;some_array {\n    <span class=\"hljs-comment\">// x will be each item of an array</span>\n}\n\n<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    .<span class=\"hljs-title function_ invoke__\">iter</span>()\n    .<span class=\"hljs-title function_ invoke__\">map</span>(...)\n    <span class=\"hljs-comment\">// HUGE AMOUNT OF THINGS HERE</span>\n    <span class=\"hljs-comment\">// you can create your own...</span>\n    .collect::&lt;<span class=\"hljs-type\">Vec</span>&lt;_&gt;&gt;();\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"functions\">Functions</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">foo</span>() {\n}\n</code></pre>\n<h3 id=\"parameters\">Parameters</h3>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">arg1: <span class=\"hljs-built_in\">number</span>, arg2: <span class=\"hljs-built_in\">number</span></span>) {}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">foo</span>(arg1: <span class=\"hljs-type\">f64</span>, arg2: <span class=\"hljs-type\">f64</span>) {\n    <span class=\"hljs-comment\">// numbers can be a bit complicated</span>\n}\n</code></pre>\n<h3 id=\"return\">Return</h3>\n<p>This is interesting in typescript. You may have to change some habbits</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// The return type is based on the code below</span>\n<span class=\"hljs-comment\">// function foo(): number {</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>;\n}\n</code></pre>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">foo</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">usize</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>;\n}\n</code></pre>\n<h3 id=\"closures\">Closures</h3>\n<pre><code class=\"hljs language-typescript\">(x) =&gt; {\n  <span class=\"hljs-keyword\">return</span> x;\n};\n\n<span class=\"hljs-comment\">// or auto return x + 1 like</span>\n<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-number\">1</span>;\n</code></pre>\n<pre><code class=\"hljs language-rust\">|x| {\n    <span class=\"hljs-keyword\">return</span> x;\n}\n\n|x| x + <span class=\"hljs-number\">1</span>\n</code></pre>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"class-and-methods\">Class and Methods</h2>\n<p>This one is where the truest magic happens</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Foo</span> {\n    properties...\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) { ... }\n\n    methods...\n\n    <span class=\"hljs-keyword\">static</span> methods\n\n    <span class=\"hljs-keyword\">private</span> methods\n\n    <span class=\"hljs-keyword\">protected</span> methods <span class=\"hljs-comment\">// if you use this i&#x27;ll fire you</span>\n}\n</code></pre>\n<p>Pay real close attention</p>\n<pre><code class=\"hljs language-rust\">\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Foo</span> {\n    properties ...\n    <span class=\"hljs-keyword\">pub</span> properties ...\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Foo</span> {\n    <span class=\"hljs-comment\">// these are both static methods</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">this</span>() <span class=\"hljs-comment\">// available usage within the file</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">this</span>() <span class=\"hljs-comment\">// available usage within the file</span>\n\n    <span class=\"hljs-comment\">// you should be able to understand this before the end</span>\n    <span class=\"hljs-comment\">// of the day..</span>\n    <span class=\"hljs-comment\">//</span>\n    <span class=\"hljs-comment\">// and all of this can add pub</span>\n    <span class=\"hljs-comment\">// these are instance methods</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">this</span>(&amp;<span class=\"hljs-keyword\">self</span>)...\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">this</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>)...\n\n    <span class=\"hljs-comment\">// public instance methods</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">this</span>(<span class=\"hljs-keyword\">self</span>)...\n}\n</code></pre>\n<ul>\n<li>What stuck out to you?</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n<h2 id=\"interfaces\">Interfaces</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Foo</span> {\n  <span class=\"hljs-attr\">properties</span>: <span class=\"hljs-keyword\">type</span>; <span class=\"hljs-comment\">//gross</span>\n  <span class=\"hljs-title function_\">method</span>(): retType;\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Foo</span> {\n  <span class=\"hljs-title function_\">hey_another_method</span>(); <span class=\"hljs-comment\">// i feel many things about this</span>\n}\n</code></pre>\n<p>again, look for something special here</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Foo</span> {\n    <span class=\"hljs-comment\">// no properties</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">method</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> retType;\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Foo</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">MyStruct</span> {\n    ...\n}\n</code></pre>\n<ul>\n<li>traits compose\nthis may not sound big, but its AMAZING effectively prevents the need for\ninheritance</li>\n</ul>\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n","slug":"basic-diff","title":"The Basics: Syntax","section":"Introduction","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/01-introduction/B-basic-diff.md","nextSlug":"/rust-for-typescript-devs/lessons/introduction/numbers-and-strings","prevSlug":"/rust-for-typescript-devs/lessons/introduction/intro"}},"__N_SSG":true}
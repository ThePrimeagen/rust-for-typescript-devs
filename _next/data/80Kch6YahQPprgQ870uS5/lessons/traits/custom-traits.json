{"pageProps":{"post":{"attributes":{"title":"Custom Traits"},"html":"<h2 id=\"what-about-our-own-traits\">What about our own traits?</h2>\n<p>Lets create our own amazing trait!</p>\n<p>Lets talk about collisions (don&#39;t worry we will stay out of complicated math)</p>\n<ul>\n<li><p>One side note, our collision system is <em>SUPER FLAWED</em> but enough to make it\neasy to test and show off some <em>really</em> cool features. So just deal with it\nmy game programmers that are in the audience.</p>\n</li>\n<li><p>its Not really collision, its more checking to see if any <code>point</code> exists\nwithin</p>\n</li>\n</ul>\n<pre><code>src/\n  shapes/\n    collisions.rs\n</code></pre>\n<p>Don&#39;t forget to add it to <code>mod.rs</code></p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> collisions;\n</code></pre>\n<ul>\n<li><p>implement trait <code>Collidable&lt;T&gt;</code> with fn <code>collide(&amp;self, &amp;T)</code> and\n<code>collides(&amp;self, &amp;[T])</code></p>\n</li>\n<li><p>implement <code>contains_point</code> for <code>Rectangle</code> and <code>Circle</code></p>\n</li>\n<li><p>implement <code>Collidable&lt;Rectangle&gt;</code> for <code>Rectangle</code></p>\n</li>\n<li><p>implement <code>Collidable&lt;Circle&gt;</code> for <code>Rectangle</code></p>\n</li>\n<li><p>implement <code>Collidable&lt;Circle&gt;</code> for <code>Circle</code></p>\n</li>\n<li><p>implement <code>Collidable&lt;Rectangle&gt;</code> for <code>Circle</code></p>\n</li>\n</ul>\n<p>we are only looking for <code>point</code> inclusion</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<p>src/shapes/rect.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains_point</span>(&amp;<span class=\"hljs-keyword\">self</span>, (x, y): (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">return</span> x &gt;= <span class=\"hljs-keyword\">self</span>.x &amp;&amp; x &lt;= <span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width &amp;&amp;\n            y &gt;= <span class=\"hljs-keyword\">self</span>.y &amp;&amp; y &lt;= <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Collidable</span>&lt;Circle&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">collide</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Circle) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">return</span> other.<span class=\"hljs-title function_ invoke__\">collide</span>(<span class=\"hljs-keyword\">self</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Collidable</span>&lt;Rectangle&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">collide</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> other {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">contains_point</span>(point) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n<p>src/shapes/circle.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains_point</span>(&amp;<span class=\"hljs-keyword\">self</span>, (x, y): (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dx</span> = <span class=\"hljs-keyword\">self</span>.x - x;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dy</span> = <span class=\"hljs-keyword\">self</span>.y - y;\n\n        <span class=\"hljs-keyword\">return</span> dx * dx + dy * dy &lt;= <span class=\"hljs-keyword\">self</span>.radius * <span class=\"hljs-keyword\">self</span>.radius;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Collidable</span>&lt;Rectangle&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">collide</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> other {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">contains_point</span>(point) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Collidable</span>&lt;Circle&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">collide</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Circle) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">contains_point</span>((other.x, other.y)) ||\n            other.<span class=\"hljs-title function_ invoke__\">contains_point</span>((<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y));\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"is-the-code-a-bit-similar-and-ugly\">Is the code a bit... similar and... ugly?</h2>\n<p>Circular references?? Repetitive??? This just isn&#39;t the way. If only there\nwas something we could do... wait... could traits help? how serendipitous!</p>\n","slug":"custom-traits","title":"Custom Traits","section":"Traits","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/04-traits/D-custom-traits.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/generic-types","prevSlug":"/rust-for-typescript-devs/lessons/traits/creating-iterators"}},"__N_SSG":true}
{"pageProps":{"post":{"attributes":{"title":"Creating Iterators"},"html":"<h2 id=\"now-its-time-to-take-it-to-the-next-level\">Now its time to take it to the next level</h2>\n<p>Lets make some things that are a bit... useless, but they show off how to use\nrust and that is what we are going for</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"iterator\">Iterator</h2>\n<p>An iterator isn&#39;t just something we interact with, its something we can also\ncreate!</p>\n<p>Lets talk about how iterators are implemented (whiteboard)</p>\n<p>Lets implement an iterator for <code>Rectangle</code>. It will iterate over the four\npoints</p>\n<p>src/shapes/rect.rs</p>\n<ul>\n<li>struct <code>RectIter</code> with a <code>points: Vec&lt;(f64, f64)&gt;</code> and <code>idx: usize</code></li>\n<li>implement <code>Iterator</code> for <code>RectIter</code></li>\n<li>implement <code>IntoIterator</code> for <code>Rectangle</code></li>\n</ul>\n<p>src/main.rs</p>\n<ul>\n<li>create a rect</li>\n<li>iterate over a rect <code>for point in rect</code> printing out each point</li>\n<li>print out the entire rectangle via the <code>Display</code> trait</li>\n</ul>\n<p>I&#39;ll give you a moment to try it a bit yourself</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<p>Why are we getting a borrow checker issue?</p>\n<p>src/main.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> shapes::rect::Rectangle;\n\n<span class=\"hljs-keyword\">mod</span> shapes;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> rect {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;({}, {})&quot;</span>, point.<span class=\"hljs-number\">0</span>, point.<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, rect);\n}\n</code></pre>\n<p>src/shapes/rect.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">RectIter</span> {\n    points: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt;,\n    idx: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">RectIter</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.idx &gt;= <span class=\"hljs-keyword\">self</span>.points.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n        }\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">point</span> = <span class=\"hljs-keyword\">self</span>.points[<span class=\"hljs-keyword\">self</span>.idx];\n        <span class=\"hljs-keyword\">self</span>.idx += <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(point);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">IntoIter</span> = RectIter;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::IntoIter {\n        <span class=\"hljs-keyword\">return</span> RectIter {\n            points: <span class=\"hljs-built_in\">vec!</span>[\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n            ],\n            idx: <span class=\"hljs-number\">0</span>,\n        }\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"intoiterator\">IntoIterator</h2>\n<p>It <em>consumes</em> the thing you give it. We need to give it something to consume\nthat wont consume our original struct!</p>\n<p>Lets do a quick example in main with <code>Vec</code> and a <code>for</code> loop to show the\nconsuming vs non consuming.</p>\n<p>So what do we do?\n(make simple fix)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">IntoIter</span> = RectIter;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::IntoIter {\n        <span class=\"hljs-keyword\">return</span> RectIter {\n            points: [\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n            ],\n            idx: <span class=\"hljs-number\">0</span>,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> &amp;Rectangle {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">IntoIter</span> = RectIter;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::IntoIter {\n        <span class=\"hljs-keyword\">return</span> RectIter {\n            points: [\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n            ],\n            idx: <span class=\"hljs-number\">0</span>,\n        }\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"i-hate-duplicating-code\">I hate duplicating code</h2>\n<p>Notice that they are the <em>same</em> code, just different types. One is the <em>value</em>\n<code>Rectangle</code> and the other is a reference to <code>Rectangle</code></p>\n<ul>\n<li>lets implement a constructor</li>\n<li>lets do it the trait way (<code>From</code>)</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<p>Never sleep on the <code>From&lt;T&gt;</code> trait. It allows you to hide complicated code and\nit relies on built in behavior.</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">RectIter</span> {\n    points: [(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>); <span class=\"hljs-number\">4</span>],\n    idx: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">From</span>&lt;&amp;Rectangle&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">RectIter</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from</span>(rect: &amp;Rectangle) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">return</span> RectIter {\n            points: <span class=\"hljs-built_in\">vec!</span>[\n                (rect.x, rect.y),\n                (rect.x + rect.width, rect.y),\n                (rect.x, rect.y + rect.height),\n                (rect.x + rect.width, rect.y + rect.height),\n            ],\n            idx: <span class=\"hljs-number\">0</span>,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">IntoIter</span> = RectIter;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::IntoIter {\n        <span class=\"hljs-title function_ invoke__\">return</span> (&amp;<span class=\"hljs-keyword\">self</span>).<span class=\"hljs-title function_ invoke__\">into</span>();\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">IntoIterator</span> <span class=\"hljs-keyword\">for</span> &amp;Rectangle {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">IntoIter</span> = RectIter;\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">into_iter</span>(<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span>::IntoIter {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">into</span>();\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"questions\">Questions</h2>\n<p>We are in some heavy stuff now</p>\n","slug":"creating-iterators","title":"Creating Iterators","section":"Traits","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/04-traits/C-creating-iterators.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/custom-traits","prevSlug":"/rust-for-typescript-devs/lessons/traits/creating-modules"}},"__N_SSG":true}
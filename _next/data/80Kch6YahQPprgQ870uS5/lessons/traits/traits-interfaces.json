{"pageProps":{"post":{"attributes":{"title":"Traits vs Interfaces"},"html":"<h2 id=\"check-point\">Check point</h2>\n<p>We have talked about:</p>\n<ul>\n<li>Iterators</li>\n<li>Enums<ul>\n<li>Options</li>\n<li>Results</li>\n</ul>\n</li>\n<li>Borrow Checker</li>\n</ul>\n<p>We another big concept we need to go over to &quot;complete&quot; our tour of rust</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"traits-they-are-like-interfaces\">Traits, they are like interfaces</h2>\n<p>You can define most of rust&#39;s behavior, from addition, equality checks,\nhashing, parsing strings, to being displayed via traits.</p>\n<p>Traits are effectively Interfaces but how they are used are a bit different,\nand how the language lets you specify them is different.</p>\n<p>What traits allow you to do cannot be directly done in JS. The language\ndoesn&#39;t have the ability to do the same thing.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"first-lets-just-start-off-with-simple-trait-stuff\">First, lets just start off with simple trait stuff</h2>\n<p>But lets do it in TypeScript first\nLets do the following:</p>\n<ul>\n<li>create type <code>Rectangle</code>, defined with <code>width</code>, <code>height</code>, <code>x</code>, and <code>y</code>.</li>\n<li>create type <code>Circle</code>, defined with <code>radius</code>, <code>x</code>, and <code>y</code>.</li>\n</ul>\n<p>we will be adding methods to <code>Rectangle</code> and <code>Circle</code> so it is easiest just to\nmake them classes</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> x: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> y: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> width: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> height: <span class=\"hljs-built_in\">number</span>\n  </span>) {}\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> x: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-keyword\">public</span> y: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-keyword\">public</span> radius: <span class=\"hljs-built_in\">number</span></span>) {}\n}\n</code></pre>\n<p>We could use types here, but we are about to add methods which will make the\ncreation of these objects inefficient and frustrating.</p>\n<p>Lets add an <code>Area</code> interface that defines an area method</p>\n<ul>\n<li><code>interface Area</code><ul>\n<li><code>area(): number</code></li>\n</ul>\n</li>\n<li>add <code>area</code> to both <code>Circle</code> and <code>Rectangle</code></li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Area</span> {\n  <span class=\"hljs-title function_\">area</span>(): <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-comment\">// added Area for fun</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Area</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> x: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> y: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> width: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> height: <span class=\"hljs-built_in\">number</span>\n  </span>) {}\n\n  <span class=\"hljs-title function_\">area</span>(): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">width</span> * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">height</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> x: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-keyword\">public</span> y: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-keyword\">public</span> radius: <span class=\"hljs-built_in\">number</span></span>) {}\n\n  <span class=\"hljs-title function_\">area</span>(): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">radius</span> * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">radius</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span>;\n  }\n}\n</code></pre>\n<p>Lets make some observations.</p>\n<ol>\n<li><p>When you define <code>Area</code> interface, you get to state methods / properties you\nrequire</p>\n</li>\n<li><p>When implementing an interface, it must be done on the object definition at\nthe time of declaration. This is a very important point.</p>\n</li>\n</ol>\n<p>What does this mean?</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> { <span class=\"hljs-comment\">// i declare rect</span>\n    ...\n    <span class=\"hljs-title function_\">area</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-comment\">// i must also declare the interfaces i implement</span>\n        ...\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-see-how-rusts-does-this\">Lets see how rusts does this.</h2>\n<p>first, lets implement the structs <code>Rectangle</code> and <code>Cicle</code>.</p>\n<pre><code class=\"hljs language-rust\">x: <span class=\"hljs-type\">f64</span>\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    x: <span class=\"hljs-type\">f64</span>,\n    y: <span class=\"hljs-type\">f64</span>,\n    width: <span class=\"hljs-type\">f64</span>,\n    height: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Circle</span> {\n    x: <span class=\"hljs-type\">f64</span>,\n    y: <span class=\"hljs-type\">f64</span>,\n    radius: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() { }\n</code></pre>\n<p>Now create &amp; implement the <code>Area</code> trait. Then in main function create a\n<code>Circle</code> and a <code>Rectangle</code> and get its area.</p>\n<p>(i&#39;ll help)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-3\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> std::<span class=\"hljs-type\">f64</span>::consts::PI;\n\n<span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Area</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.radius * <span class=\"hljs-keyword\">self</span>.radius * PI\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">circle</span> = Circle {\n        x: <span class=\"hljs-number\">0f64</span>, y: <span class=\"hljs-number\">0f64</span>,\n        radius: <span class=\"hljs-number\">4f64</span>,\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle {\n        x: <span class=\"hljs-number\">0f64</span>, y: <span class=\"hljs-number\">0f64</span>,\n        width: <span class=\"hljs-number\">2f64</span>,\n        height: <span class=\"hljs-number\">8f64</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;area: {}&quot;</span>, rect.<span class=\"hljs-title function_ invoke__\">area</span>());\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;area: {}&quot;</span>, circle.<span class=\"hljs-title function_ invoke__\">area</span>());\n\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-try-something-else\">Lets... try something else</h2>\n<p>Lets use this <code>Area</code> trait/interface, but lets make a very small change.</p>\n<p>Lets move the <code>Rect</code> and <code>Circle</code> definition to another file, <code>src/shapes.rs</code></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-4\">Complete Code</h2>\n<p>src/shapes.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">pub</span> x: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> y: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> width: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> height: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">pub</span> x: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> y: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> radius: <span class=\"hljs-type\">f64</span>,\n}\n</code></pre>\n<p>src/main.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">mod</span> shapes\n\n<span class=\"hljs-keyword\">use</span> std::<span class=\"hljs-type\">f64</span>::consts::PI;\n\n<span class=\"hljs-keyword\">use</span> rust::shapes::{Rectangle, Circle};\n\n<span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Area</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.radius * <span class=\"hljs-keyword\">self</span>.radius * PI\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">circle</span> = Circle {\n        x: <span class=\"hljs-number\">0f64</span>, y: <span class=\"hljs-number\">0f64</span>,\n        radius: <span class=\"hljs-number\">4f64</span>,\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle {\n        x: <span class=\"hljs-number\">0f64</span>, y: <span class=\"hljs-number\">0f64</span>,\n        width: <span class=\"hljs-number\">2f64</span>,\n        height: <span class=\"hljs-number\">8f64</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;area: {}&quot;</span>, rect.<span class=\"hljs-title function_ invoke__\">area</span>());\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;area: {}&quot;</span>, circle.<span class=\"hljs-title function_ invoke__\">area</span>());\n\n}\n</code></pre>\n","slug":"traits-interfaces","title":"Traits vs Interfaces","section":"Traits","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/04-traits/A-traits-interfaces.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/creating-modules","prevSlug":"/rust-for-typescript-devs/lessons/borrow-checker/borrow-checker"}},"__N_SSG":true}
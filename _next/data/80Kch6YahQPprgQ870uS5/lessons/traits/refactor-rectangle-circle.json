{"pageProps":{"post":{"attributes":{"title":"Refactor Rectangle & Circle"},"html":"<h2 id=\"so-what-does-this-give-us\">So what does this give us?</h2>\n<p>Well, now we need to rework our <code>Rectangle</code> and <code>Circle</code> implementation a bit.</p>\n<ul>\n<li>We don&#39;t need <code>RectIter</code>, we have <code>PointIter</code> now. So everything associated\nwith <code>RectIter</code>, including <code>Rectangle</code> <code>IntoIterator</code> can be removed</li>\n<li>implement <code>Points</code> for <code>Rectangle</code></li>\n<li>implement <code>Contains</code> for <code>Rectangle</code><ul>\n<li>we already have that implemented on the <code>Rectangle</code> <code>impl</code></li>\n</ul>\n</li>\n<li>implement <code>Points</code> for <code>Circle</code></li>\n<li>implement <code>Contains</code> for <code>Circle</code><ul>\n<li>we already have that implemented on the <code>Circle</code> <code>impl</code></li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<p>src/main.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> rect.<span class=\"hljs-title function_ invoke__\">points</span>() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;({}, {})&quot;</span>, point.<span class=\"hljs-number\">0</span>, point.<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect2</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, rect.<span class=\"hljs-title function_ invoke__\">collide</span>(&amp;rect2));\n}\n</code></pre>\n<p>src/shapes/rect.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Points</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">points</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> super::collisions::PointIter {\n        <span class=\"hljs-keyword\">return</span> super::collisions::PointIter {\n            points: <span class=\"hljs-built_in\">vec!</span>[\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y),\n                (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n                (<span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height),\n            ],\n            idx: <span class=\"hljs-number\">0</span>,\n        };\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Contains</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains_point</span>(&amp;<span class=\"hljs-keyword\">self</span>, (x, y): (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">return</span> x &gt;= <span class=\"hljs-keyword\">self</span>.x &amp;&amp; x &lt;= <span class=\"hljs-keyword\">self</span>.x + <span class=\"hljs-keyword\">self</span>.width &amp;&amp;\n            y &gt;= <span class=\"hljs-keyword\">self</span>.y &amp;&amp; y &lt;= <span class=\"hljs-keyword\">self</span>.y + <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n</code></pre>\n<p>src/shapes/circle.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Contains</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains_point</span>(&amp;<span class=\"hljs-keyword\">self</span>, (x, y): (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dx</span> = <span class=\"hljs-keyword\">self</span>.x - x;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">dy</span> = <span class=\"hljs-keyword\">self</span>.y - y;\n\n        <span class=\"hljs-keyword\">return</span> dx * dx + dy * dy &lt;= <span class=\"hljs-keyword\">self</span>.radius * <span class=\"hljs-keyword\">self</span>.radius;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Points</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">points</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> super::collisions::PointIter {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y),\n        ].<span class=\"hljs-title function_ invoke__\">into</span>();\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-try-it-out-in-our-main-file\">Lets try it out in our main file</h2>\n<ul>\n<li>create 2 <code>Rectangle</code>s</li>\n<li>create 2 <code>Circle</code>s</li>\n<li>test &quot;<code>Collision</code>s&quot;</li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"why-doesnt-this-work\">Why doesn&#39;t this work?</h2>\n<p>src/main.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">mod</span> shapes;\n\n<span class=\"hljs-keyword\">use</span> shapes::{circle::Circle, collisions::Collidable};\n\n<span class=\"hljs-keyword\">use</span> crate::shapes::rect::Rectangle;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect2</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">circ</span> = Circle {\n        radius: <span class=\"hljs-number\">3.0</span>,\n        x: <span class=\"hljs-number\">1.0</span>,\n        y: <span class=\"hljs-number\">1.0</span>,\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">circ2</span> = Circle {\n        radius: <span class=\"hljs-number\">2.0</span>,\n        x: <span class=\"hljs-number\">1.0</span>,\n        y: <span class=\"hljs-number\">1.0</span>,\n    };\n\n    rect.<span class=\"hljs-title function_ invoke__\">collide</span>(&amp;rect2);\n    circ.<span class=\"hljs-title function_ invoke__\">collide</span>(&amp;circ2);\n    circ.<span class=\"hljs-title function_ invoke__\">collide</span>(&amp;rect);\n}\n</code></pre>\n<p>Lets go look at our <code>Collidable</code> definition, perhaps we can see something wrong</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span>&lt;T, V&gt; Collidable&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">V</span>\n<span class=\"hljs-keyword\">where</span> T: Points,\n      V: Contains\n{\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">collide</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> other.<span class=\"hljs-title function_ invoke__\">points</span>() {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">contains_point</span>(point) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n","slug":"refactor-rectangle-circle","title":"Refactor Rectangle & Circle","section":"Traits","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/04-traits/F-refactor-rectangle-circle.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/reading-from-file","prevSlug":"/rust-for-typescript-devs/lessons/traits/generic-types"}},"__N_SSG":true}
{"pageProps":{"post":{"attributes":{"title":"Creating Modules"},"html":"<h2 id=\"now-do-you-see\">Now do you see?</h2>\n<p>trust me, you don&#39;t. Lets make this even better. This small change makes a lot\nof things possible. Watch this, i can <code>impl Area</code> on any type, even types I\ndon&#39;t own, like a <code>f64</code>.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<p>woah...</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">f64</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span> * <span class=\"hljs-keyword\">self</span>;\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;area: {}&quot;</span>, <span class=\"hljs-number\">6.9</span>.<span class=\"hljs-title function_ invoke__\">area</span>());\n}\n</code></pre>\n<p>WAIT, THIS IS DANGEROUS, THESE ARE POLYFILLS!!! GLOBAL STATE CHANGE IS BAD!!!</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"it-gets-even-better\">It gets even better</h2>\n<p>Let&#39;s move <code>Area</code> trait and trait implementations into <code>shapes.rs</code></p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> std::<span class=\"hljs-type\">f64</span>::consts::PI;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">pub</span> x: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> y: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> width: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> height: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">pub</span> x: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> y: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> radius: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Area</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span>;\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Circle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.radius * <span class=\"hljs-keyword\">self</span>.radius * PI\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">f64</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span> * <span class=\"hljs-keyword\">self</span>;\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-go-back-to-our-main-file-and-just-type-this\">Lets go back to our main file and just type this.</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;area: {}&quot;</span>, <span class=\"hljs-number\">6.9</span>.<span class=\"hljs-title function_ invoke__\">area</span>());\n}\n</code></pre>\n<p>Why does this error? Didn&#39;t we implement <code>Area</code> for <code>f64</code></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"big-take-away-1\">BIG TAKE AWAY 1.</h2>\n<p><strong>Traits must be imported to work</strong></p>\n<p>This means there is no global polyfills... In JavaScript you edit the\n<code>prototype</code> and now you have this function, but it exists for the whole project</p>\n<p>In Rust, its only for files that import the trait</p>\n<pre><code class=\"hljs language-typescript\">&gt; <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">area</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span> * <span class=\"hljs-variable language_\">this</span>; }\n[<span class=\"hljs-title class_\">Function</span> (anonymous)]\n\n&gt; (<span class=\"hljs-number\">5</span>).<span class=\"hljs-title function_\">area</span>()\n<span class=\"hljs-number\">25</span>\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"tell-me-that-is-not-cool\">Tell me that is not cool.</h2>\n<p>(we are not done yet...)</p>\n<p><strong>i must fail to succeed</strong></p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-organize-our-files-a-bit-more\">Lets organize our files a bit more</h2>\n<p>Lets create the following structure in our code base, and then move the\ncontents of <code>shapes.rs</code> into <code>shapes/mod.rs</code></p>\n<p><code>mod.rs</code> is effectively the same thing as <code>index.ts</code></p>\n<h3 id=\"typescript\">TypeScript</h3>\n<pre><code>src/\n  shapes/\n    index.ts\n  index.ts\n</code></pre>\n<h3 id=\"rust\">Rust</h3>\n<pre><code>src/\n  shapes/\n    mod.rs\n  main.rs\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-further-break-up-the-rust-files\">Lets further break up the rust files</h2>\n<p>Move each related code to each file</p>\n<pre><code>src/\n  shapes/\n    mod.rs\n    rect.rs\n    circle.rs\n    area.rs\n  main.rs\n</code></pre>\n<p>mod.rs</p>\n<pre><code>pub mod rect;\npub mod circle;\npub mod area;\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-create-a-rectangle\">Lets create a Rectangle!</h2>\n<p>To prove we have everything working, lets create a <code>Rectangle</code> in our main\nfile.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"this-is-annoying-to-type\">This is annoying to type</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">mod</span> shapes;\n\n<span class=\"hljs-keyword\">use</span> shapes::rect::Rectangle;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle {\n        height: <span class=\"hljs-number\">10.0</span>,\n        width: <span class=\"hljs-number\">10.0</span>,\n        x: <span class=\"hljs-number\">0.0</span>,\n        y: <span class=\"hljs-number\">0.0</span>,\n    };\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"lets-implement-the-default-method\">Lets implement the <code>default</code> method</h2>\n<p>This also allows us to have some amazing other integrations, but for now its\nnice to just have a way to create the default rectangle and circle.</p>\n<p>(to the code)</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<p>src/shapes/rect.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> super::area::Area;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">pub</span> x: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> y: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> width: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> height: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">return</span> Rectangle {\n            x: <span class=\"hljs-number\">0f64</span>,\n            y: <span class=\"hljs-number\">0f64</span>,\n            width: <span class=\"hljs-number\">10f64</span>,\n            height: <span class=\"hljs-number\">10f64</span>,\n        };\n    }\n}\n</code></pre>\n<p>src/main.rs</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> shapes::rect::Rectangle;\n\n<span class=\"hljs-keyword\">mod</span> shapes;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"the-points-are-in-the-rectangle\">The point&#39;s are <em>in</em> the Rectangle?</h2>\n<p>I want to be able to print out the rectangle now... but i don&#39;t want <code>Debug</code>\nprint out, i want my <em>own</em> printout!</p>\n<p>I want this...</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> shapes::rect::Rectangle;\n\n<span class=\"hljs-keyword\">mod</span> shapes;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rect</span> = Rectangle::<span class=\"hljs-title function_ invoke__\">default</span>();\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">&quot;{}&quot;</span>, rect);\n}\n</code></pre>\n<p>Lets type this in, and see if someone can tell me what the error is.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"ok-so-implement-display\">Ok... so implement display?</h2>\n<p>Lets try it out!</p>\n<p>I&#39;ll give you one moment. Btw, its <code>std::fmt::Display</code>.</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-2\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n\n<span class=\"hljs-keyword\">use</span> super::area::Area;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">pub</span> x: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> y: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> width: <span class=\"hljs-type\">f64</span>,\n    <span class=\"hljs-keyword\">pub</span> height: <span class=\"hljs-type\">f64</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Area</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">area</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height;\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Default</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">default</span>() <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">return</span> Rectangle {\n            x: <span class=\"hljs-number\">0f64</span>,\n            y: <span class=\"hljs-number\">0f64</span>,\n            width: <span class=\"hljs-number\">10f64</span>,\n            height: <span class=\"hljs-number\">10f64</span>,\n        };\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Display</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Rectangle</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> std::fmt::Formatter&lt;<span class=\"hljs-symbol\">&#x27;_</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> std::fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">write!</span>(\n            f,\n            <span class=\"hljs-string\">&quot;Rectangle({}, {}), {}x{}&quot;</span>,\n            <span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y, <span class=\"hljs-keyword\">self</span>.width, <span class=\"hljs-keyword\">self</span>.height\n        );\n    }\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"can-we-do-this-in-typescript\">Can we do this in TypeScript?</h2>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-3\">Complete Code</h2>\n<p>src/shapes/index.ts</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Area</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">public</span> x: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> y: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> width: <span class=\"hljs-built_in\">number</span>,\n    <span class=\"hljs-keyword\">public</span> height: <span class=\"hljs-built_in\">number</span>\n  </span>) {}\n\n  <span class=\"hljs-title function_\">area</span>(): <span class=\"hljs-built_in\">number</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">width</span> * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">height</span>;\n  }\n\n  <span class=\"hljs-title function_\">toString</span>(): <span class=\"hljs-built_in\">string</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Rectangle(<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.x}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.y}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.width}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.height}</span>)`</span>;\n  }\n}\n</code></pre>\n<p>src/index.ts</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Rectangle</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./shapes&quot;</span>;\n\n<span class=\"hljs-keyword\">let</span> rect = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Rectangle</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${rect}</span>`</span>);\n</code></pre>\n","slug":"creating-modules","title":"Creating Modules","section":"Traits","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/04-traits/B-creating-modules.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/creating-iterators","prevSlug":"/rust-for-typescript-devs/lessons/traits/traits-interfaces"}},"__N_SSG":true}
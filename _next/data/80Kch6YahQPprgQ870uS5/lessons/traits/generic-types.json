{"pageProps":{"post":{"attributes":{"title":"Generic Trait Implementation"},"html":"<h2 id=\"lets-try-something-different\">Lets try something different</h2>\n<p><strong>in the collisions.rs</strong></p>\n<ul>\n<li>create a <code>PointIter</code> that has a <code>Vec&lt;(f64, f64)&gt;</code> and <code>idx</code></li>\n<li>create a convenient method to take Vec&lt;(f64, f64)&gt; and convert it <code>into</code>\n<code>PointIter</code></li>\n<li>implement <code>Iterator</code> for <code>PointIter</code></li>\n<li>create a <code>Points</code> trait that has one method, <code>points</code>, that returns an\n<code>PointIter</code></li>\n<li>create a <code>Contains</code> trait that has one method, <code>contains_point</code>, that returns\n<code>bool</code> if the point is contained within the geometry</li>\n<li>all of this in <code>src/shapes/collisions.rs</code></li>\n</ul>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">PointIter</span> {\n    points: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt;,\n    idx: <span class=\"hljs-type\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">From</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt;&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">PointIter</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">from</span>(value: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt;) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">return</span> PointIter {\n            points: value,\n            idx: <span class=\"hljs-number\">0</span>,\n        };\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">Iterator</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">PointIter</span> {\n    <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Item</span> = (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>);\n\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">next</span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Option</span>&lt;<span class=\"hljs-keyword\">Self</span>::Item&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.idx &gt;= <span class=\"hljs-keyword\">self</span>.points.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>;\n        }\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">point</span> = <span class=\"hljs-keyword\">self</span>.points[<span class=\"hljs-keyword\">self</span>.idx];\n        <span class=\"hljs-keyword\">self</span>.idx += <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Some</span>(point);\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Points</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">points</span>(&amp;<span class=\"hljs-keyword\">self</span>) <span class=\"hljs-punctuation\">-&gt;</span> PointIter;\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title class_\">Contains</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">contains_point</span>(&amp;<span class=\"hljs-keyword\">self</span>, point: (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span>;\n}\n</code></pre>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"so-why-did-we-do-this\">So why did we do this?</h2>\n<p>Lets relook at our <code>Collidable</code> implementation. We can now do a &quot;blanket&quot;\nimplementation. This allows us to define a generic implemenation over generic\ntrait combinations!!!</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<p>You&gt; &quot;i know all these words individually, but when you put them together like\nthat...&quot;</p>\n<p>Me&gt; &quot;Just watch (and program to get the most out of it)&quot;</p>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"complete-code-1\">Complete Code</h2>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Collidable&lt;T&gt; <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">T</span> <span class=\"hljs-keyword\">where</span> T: Contains + Points {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">collide</span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;T) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">bool</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> other.<span class=\"hljs-title function_ invoke__\">points</span>() {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-title function_ invoke__\">contains_point</span>(point) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n","slug":"generic-types","title":"Generic Trait Implementation","section":"Traits","icon":"info-circle","filePath":"/home/runner/work/rust-for-typescript-devs/rust-for-typescript-devs/lessons/04-traits/E-generic-types.md","nextSlug":"/rust-for-typescript-devs/lessons/traits/refactor-rectangle-circle","prevSlug":"/rust-for-typescript-devs/lessons/traits/custom-traits"}},"__N_SSG":true}